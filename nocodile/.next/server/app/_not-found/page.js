/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/_not-found/page";
exports.ids = ["app/_not-found/page"];
exports.modules = {

/***/ "(rsc)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"8c951207d081\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xccmFuZG9cXERlc2t0b3BcXG5vY29kaWxlXFxub2NvZGlsZVxcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjhjOTUxMjA3ZDA4MVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/globals.css\n");

/***/ }),

/***/ "(rsc)/./app/layout.tsx":
/*!************************!*\
  !*** ./app/layout.tsx ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Geist_arguments_variable_font_geist_sans_subsets_latin_variableName_geistSans___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"} */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-sans\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistSans\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Geist_arguments_variable_font_geist_sans_subsets_latin_variableName_geistSans___WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_Geist_arguments_variable_font_geist_sans_subsets_latin_variableName_geistSans___WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Geist_Mono_arguments_variable_font_geist_mono_subsets_latin_variableName_geistMono___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"} */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist_Mono\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-mono\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistMono\\\"}\");\n/* harmony import */ var next_font_google_target_css_path_app_layout_tsx_import_Geist_Mono_arguments_variable_font_geist_mono_subsets_latin_variableName_geistMono___WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_font_google_target_css_path_app_layout_tsx_import_Geist_Mono_arguments_variable_font_geist_mono_subsets_latin_variableName_geistMono___WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _globals_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.css */ \"(rsc)/./app/globals.css\");\n/* harmony import */ var _contexts_ProjectContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/contexts/ProjectContext */ \"(rsc)/./contexts/ProjectContext.tsx\");\n\n\n\n\n\nconst metadata = {\n    title: \"Nocodile\",\n    description: \"Object identifier\"\n};\nconst Logo = ()=>{\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n        //className=\"fixed\"\n        src: \"/templogo.png\",\n        alt: \"logo\",\n        style: {\n            opacity: 0.2\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n        lineNumber: 23,\n        columnNumber: 5\n    }, undefined);\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            className: `${(next_font_google_target_css_path_app_layout_tsx_import_Geist_arguments_variable_font_geist_sans_subsets_latin_variableName_geistSans___WEBPACK_IMPORTED_MODULE_3___default().variable)} ${(next_font_google_target_css_path_app_layout_tsx_import_Geist_Mono_arguments_variable_font_geist_mono_subsets_latin_variableName_geistMono___WEBPACK_IMPORTED_MODULE_4___default().variable)} antialiased dotted-grid`,\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_ProjectContext__WEBPACK_IMPORTED_MODULE_2__.ProjectProvider, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Logo, {}, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n                        lineNumber: 42,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                        children: children\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n                        lineNumber: 43,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n                lineNumber: 41,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n            lineNumber: 38,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\",\n        lineNumber: 37,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvbGF5b3V0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUtNQTtBQUtBQztBQVJpQjtBQUNxQztBQVlyRCxNQUFNRSxXQUFxQjtJQUNoQ0MsT0FBTztJQUNQQyxhQUFhO0FBQ2YsRUFBRTtBQUVGLE1BQU1DLE9BQU87SUFDWCxxQkFDRSw4REFBQ0M7UUFDQyxtQkFBbUI7UUFDbkJDLEtBQUk7UUFDSkMsS0FBSTtRQUNKQyxPQUFPO1lBQUVDLFNBQVM7UUFBSTs7Ozs7O0FBRzVCO0FBQ2UsU0FBU0MsV0FBVyxFQUNqQ0MsUUFBUSxFQUdSO0lBQ0EscUJBQ0UsOERBQUNDO1FBQUtDLE1BQUs7a0JBQ1QsNEVBQUNDO1lBQ0NDLFdBQVcsR0FBR2pCLHVMQUFrQixDQUFDLENBQUMsRUFBRUMsNExBQWtCLENBQUMsd0JBQXdCLENBQUM7c0JBRWhGLDRFQUFDQyxxRUFBZUE7O2tDQUNkLDhEQUFDSTs7Ozs7a0NBQ0QsOERBQUNhO2tDQUFNTjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtqQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxyYW5kb1xcRGVza3RvcFxcbm9jb2RpbGVcXG5vY29kaWxlXFxhcHBcXGxheW91dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNZXRhZGF0YSB9IGZyb20gXCJuZXh0XCI7XHJcbmltcG9ydCB7IEdlaXN0LCBHZWlzdF9Nb25vIH0gZnJvbSBcIm5leHQvZm9udC9nb29nbGVcIjtcclxuaW1wb3J0IFwiLi9nbG9iYWxzLmNzc1wiO1xyXG5pbXBvcnQgeyBQcm9qZWN0UHJvdmlkZXIgfSBmcm9tIFwiQC9jb250ZXh0cy9Qcm9qZWN0Q29udGV4dFwiO1xyXG5cclxuY29uc3QgZ2Vpc3RTYW5zID0gR2Vpc3Qoe1xyXG4gIHZhcmlhYmxlOiBcIi0tZm9udC1nZWlzdC1zYW5zXCIsXHJcbiAgc3Vic2V0czogW1wibGF0aW5cIl0sXHJcbn0pO1xyXG5cclxuY29uc3QgZ2Vpc3RNb25vID0gR2Vpc3RfTW9ubyh7XHJcbiAgdmFyaWFibGU6IFwiLS1mb250LWdlaXN0LW1vbm9cIixcclxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge1xyXG4gIHRpdGxlOiBcIk5vY29kaWxlXCIsXHJcbiAgZGVzY3JpcHRpb246IFwiT2JqZWN0IGlkZW50aWZpZXJcIixcclxufTtcclxuXHJcbmNvbnN0IExvZ28gPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxpbWdcclxuICAgICAgLy9jbGFzc05hbWU9XCJmaXhlZFwiXHJcbiAgICAgIHNyYz1cIi90ZW1wbG9nby5wbmdcIlxyXG4gICAgICBhbHQ9XCJsb2dvXCJcclxuICAgICAgc3R5bGU9e3sgb3BhY2l0eTogMC4yIH19XHJcbiAgICAvPlxyXG4gICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoe1xyXG4gIGNoaWxkcmVuLFxyXG59OiBSZWFkb25seTx7XHJcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcclxufT4pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XHJcbiAgICAgIDxib2R5XHJcbiAgICAgICAgY2xhc3NOYW1lPXtgJHtnZWlzdFNhbnMudmFyaWFibGV9ICR7Z2Vpc3RNb25vLnZhcmlhYmxlfSBhbnRpYWxpYXNlZCBkb3R0ZWQtZ3JpZGB9XHJcbiAgICAgID5cclxuICAgICAgICA8UHJvamVjdFByb3ZpZGVyPlxyXG4gICAgICAgICAgPExvZ28gLz5cclxuICAgICAgICAgIDxtYWluPntjaGlsZHJlbn08L21haW4+XHJcbiAgICAgICAgPC9Qcm9qZWN0UHJvdmlkZXI+XHJcbiAgICAgIDwvYm9keT5cclxuICAgIDwvaHRtbD5cclxuICApO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJnZWlzdFNhbnMiLCJnZWlzdE1vbm8iLCJQcm9qZWN0UHJvdmlkZXIiLCJtZXRhZGF0YSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJMb2dvIiwiaW1nIiwic3JjIiwiYWx0Iiwic3R5bGUiLCJvcGFjaXR5IiwiUm9vdExheW91dCIsImNoaWxkcmVuIiwiaHRtbCIsImxhbmciLCJib2R5IiwiY2xhc3NOYW1lIiwidmFyaWFibGUiLCJtYWluIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/layout.tsx\n");

/***/ }),

/***/ "(rsc)/./contexts/ProjectContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ProjectContext.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProjectProvider: () => (/* binding */ ProjectProvider),
/* harmony export */   useProjectContext: () => (/* binding */ useProjectContext)
/* harmony export */ });
/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ "(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server.js");
/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__);

const useProjectContext = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call useProjectContext() from the server but useProjectContext is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"C:\\Users\\rando\\Desktop\\nocodile\\nocodile\\contexts\\ProjectContext.tsx",
"useProjectContext",
);const ProjectProvider = (0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(
function() { throw new Error("Attempted to call ProjectProvider() from the server but ProjectProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."); },
"C:\\Users\\rando\\Desktop\\nocodile\\nocodile\\contexts\\ProjectContext.tsx",
"ProjectProvider",
);

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2F_not-found%2Fpage&page=%2F_not-found%2Fpage&appPaths=&pagePath=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Cnode_modules%5C.pnpm%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Cbuiltin%5Cglobal-not-found.js&appDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2F_not-found%2Fpage&page=%2F_not-found%2Fpage&appPaths=&pagePath=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Cnode_modules%5C.pnpm%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Cbuiltin%5Cglobal-not-found.js&appDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_24___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-page/module.compiled */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-modules/app-page/module.compiled.js?2d85\");\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/app-render/interop-default */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/app-render/interop-default.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/experimental/ppr */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/lib/experimental/ppr.js\");\n/* harmony import */ var next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/request/fallback-params */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/request/fallback-params.js\");\n/* harmony import */ var next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/app-render/encryption-utils */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/app-render/encryption-utils.js\");\n/* harmony import */ var next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/lib/streaming-metadata */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/lib/streaming-metadata.js\");\n/* harmony import */ var next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/app-render/action-utils */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/app-render/action-utils.js\");\n/* harmony import */ var next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/server/lib/server-action-request-meta */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/lib/server-action-request-meta.js\");\n/* harmony import */ var next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/client/components/app-router-headers */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/app-router-headers.js\");\n/* harmony import */ var next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/is-bot */ \"next/dist/shared/lib/router/utils/is-bot\");\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! next/dist/lib/fallback */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/fallback.js\");\n/* harmony import */ var next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! next/dist/server/render-result */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/render-result.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var next_dist_server_stream_utils_encoded_tags__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! next/dist/server/stream-utils/encoded-tags */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/stream-utils/encoded-tags.js\");\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! next/dist/server/send-payload */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/send-payload.js\");\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! next/dist/client/components/builtin/global-error.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js\");\n/* harmony import */ var next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! next/dist/client/components/redirect-status-code */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/redirect-status-code.js\");\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"__next_app__\",\"routeModule\",\"handler\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nconst notFound0 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/not-found.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/not-found.js\", 23));\nconst module1 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/layout.tsx */ \"(rsc)/./app/layout.tsx\"));\nconst module2 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/global-error.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js\", 23));\nconst module3 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/forbidden.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/forbidden.js\", 23));\nconst module4 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/unauthorized.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/unauthorized.js\", 23));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n              children: [\"/_not-found\", {\n                children: ['__PAGE__', {}, {\n                  page: [\n                    notFound0,\n                    \"next/dist/client/components/builtin/not-found.js\"\n                  ]\n                }]\n              }, {}]\n            },\n        {\n        'layout': [module1, \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\app\\\\layout.tsx\"],\n'global-error': [module2, \"next/dist/client/components/builtin/global-error.js\"],\n'forbidden': [module3, \"next/dist/client/components/builtin/forbidden.js\"],\n'unauthorized': [module4, \"next/dist/client/components/builtin/unauthorized.js\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [];\n\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/_not-found/page\",\n        pathname: \"/_not-found\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: '',\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    var _this;\n    let srcPage = \"/_not-found/page\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const initialPostponed = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'postponed');\n    // TODO: replace with more specific flags\n    const minimalMode = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'minimalMode');\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, query, params, parsedUrl, pageIsDynamic, buildManifest, nextFontManifest, reactLoadableManifest, serverActionsManifest, clientReferenceManifest, subresourceIntegrityManifest, prerenderManifest, isDraftMode, resolvedPathname, revalidateOnlyGenerated, routerServerContext, nextConfig } = prepareResult;\n    const pathname = parsedUrl.pathname || '/';\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_13__.normalizeAppPath)(srcPage);\n    let { isOnDemandRevalidate } = prepareResult;\n    const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n    const isPrerendered = prerenderManifest.routes[resolvedPathname];\n    let isSSG = Boolean(prerenderInfo || isPrerendered || prerenderManifest.routes[normalizedSrcPage]);\n    const userAgent = req.headers['user-agent'] || '';\n    const botType = (0,next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_16__.getBotType)(userAgent);\n    const isHtmlBot = (0,next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_11__.isHtmlBotRequest)(req);\n    /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */ const isPrefetchRSCRequest = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'isPrefetchRSCRequest') ?? Boolean(req.headers[next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__.NEXT_ROUTER_PREFETCH_HEADER]);\n    // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n    const isRSCRequest = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'isRSCRequest') ?? Boolean(req.headers[next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__.RSC_HEADER]);\n    const isPossibleServerAction = (0,next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_14__.getIsPossibleServerAction)(req);\n    /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */ const couldSupportPPR = (0,next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_8__.checkIsAppPPREnabled)(nextConfig.experimental.ppr);\n    // When enabled, this will allow the use of the `?__nextppronly` query to\n    // enable debugging of the static shell.\n    const hasDebugStaticShellQuery =  false && 0;\n    // When enabled, this will allow the use of the `?__nextppronly` query\n    // to enable debugging of the fallback shell.\n    const hasDebugFallbackShellQuery = hasDebugStaticShellQuery && query.__nextppronly === 'fallback';\n    // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n    // prerender manifest and this is an app page.\n    const isRoutePPREnabled = couldSupportPPR && (((_this = prerenderManifest.routes[normalizedSrcPage] ?? prerenderManifest.dynamicRoutes[normalizedSrcPage]) == null ? void 0 : _this.renderingMode) === 'PARTIALLY_STATIC' || // Ideally we'd want to check the appConfig to see if this page has PPR\n    // enabled or not, but that would require plumbing the appConfig through\n    // to the server during development. We assume that the page supports it\n    // but only during development.\n    hasDebugStaticShellQuery && (routeModule.isDev === true || (routerServerContext == null ? void 0 : routerServerContext.experimentalTestProxy) === true));\n    const isDebugStaticShell = hasDebugStaticShellQuery && isRoutePPREnabled;\n    // We should enable debugging dynamic accesses when the static shell\n    // debugging has been enabled and we're also in development mode.\n    const isDebugDynamicAccesses = isDebugStaticShell && routeModule.isDev === true;\n    const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled;\n    // If we're in minimal mode, then try to get the postponed information from\n    // the request metadata. If available, use it for resuming the postponed\n    // render.\n    const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined;\n    // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n    // we can use this fact to only generate the flight data for the request\n    // because we can't cache the HTML (as it's also dynamic).\n    const isDynamicRSCRequest = isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest;\n    // Need to read this before it's stripped by stripFlightHeaders. We don't\n    // need to transfer it to the request meta because it's only read\n    // within this function; the static segment data should have already been\n    // generated, so we will always either return a static response or a 404.\n    const segmentPrefetchHeader = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'segmentPrefetchRSCRequest');\n    // TODO: investigate existing bug with shouldServeStreamingMetadata always\n    // being true for a revalidate due to modifying the base-server this.renderOpts\n    // when fixing this to correct logic it causes hydration issue since we set\n    // serveStreamingMetadata to true during export\n    let serveStreamingMetadata = !userAgent ? true : (0,next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_11__.shouldServeStreamingMetadata)(userAgent, nextConfig.htmlLimitedBots);\n    if (isHtmlBot && isRoutePPREnabled) {\n        isSSG = false;\n        serveStreamingMetadata = false;\n    }\n    // In development, we always want to generate dynamic HTML.\n    let supportsDynamicResponse = // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG || // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' || // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest;\n    // When html bots request PPR page, perform the full dynamic rendering.\n    const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled;\n    let ssgCacheKey = null;\n    if (!isDraftMode && isSSG && !supportsDynamicResponse && !isPossibleServerAction && !minimalPostponed && !isDynamicRSCRequest) {\n        ssgCacheKey = resolvedPathname;\n    }\n    // the staticPathKey differs from ssgCacheKey since\n    // ssgCacheKey is null in dev since we're always in \"dynamic\"\n    // mode in dev to bypass the cache, but we still need to honor\n    // dynamicParams = false in dev mode\n    let staticPathKey = ssgCacheKey;\n    if (!staticPathKey && routeModule.isDev) {\n        staticPathKey = resolvedPathname;\n    }\n    const ComponentMod = {\n        ...next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_25__,\n        tree,\n        pages,\n        GlobalError: (next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_24___default()),\n        handler,\n        routeModule,\n        __next_app__\n    };\n    // Before rendering (which initializes component tree modules), we have to\n    // set the reference manifests to our global store so Server Action's\n    // encryption util can access to them at the top level of the page module.\n    if (serverActionsManifest && clientReferenceManifest) {\n        (0,next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_10__.setReferenceManifestsSingleton)({\n            page: srcPage,\n            clientReferenceManifest,\n            serverActionsManifest,\n            serverModuleMap: (0,next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_12__.createServerModuleMap)({\n                serverActionsManifest\n            })\n        });\n    }\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    try {\n        const invokeRouteModule = async (span, context)=>{\n            const nextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_7__.NodeNextRequest(req);\n            const nextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_7__.NodeNextResponse(res);\n            // TODO: adapt for putting the RDC inside the postponed data\n            // If we're in dev, and this isn't a prefetch or a server action,\n            // we should seed the resume data cache.\n            if (true) {\n                if (nextConfig.experimental.dynamicIO && !isPrefetchRSCRequest && !context.renderOpts.isPossibleServerAction) {\n                    const warmup = await routeModule.warmup(nextReq, nextRes, context);\n                    // If the warmup is successful, we should use the resume data\n                    // cache from the warmup.\n                    if (warmup.metadata.renderResumeDataCache) {\n                        context.renderOpts.renderResumeDataCache = warmup.metadata.renderResumeDataCache;\n                    }\n                }\n            }\n            return routeModule.render(nextReq, nextRes, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const doRender = async ({ span, postponed, fallbackRouteParams })=>{\n            const context = {\n                query,\n                params,\n                page: normalizedSrcPage,\n                sharedContext: {\n                    buildId\n                },\n                serverComponentsHmrCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'serverComponentsHmrCache'),\n                fallbackRouteParams,\n                renderOpts: {\n                    App: ()=>null,\n                    Document: ()=>null,\n                    pageConfig: {},\n                    ComponentMod,\n                    Component: (0,next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__.interopDefault)(ComponentMod),\n                    params,\n                    routeModule,\n                    page: srcPage,\n                    postponed,\n                    shouldWaitOnAllReady,\n                    serveStreamingMetadata,\n                    supportsDynamicResponse: typeof postponed === 'string' || supportsDynamicResponse,\n                    buildManifest,\n                    nextFontManifest,\n                    reactLoadableManifest,\n                    subresourceIntegrityManifest,\n                    serverActionsManifest,\n                    clientReferenceManifest,\n                    setIsrStatus: routerServerContext == null ? void 0 : routerServerContext.setIsrStatus,\n                    dir: routeModule.projectDir,\n                    isDraftMode,\n                    isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n                    botType,\n                    isOnDemandRevalidate,\n                    isPossibleServerAction,\n                    assetPrefix: nextConfig.assetPrefix,\n                    nextConfigOutput: nextConfig.output,\n                    crossOrigin: nextConfig.crossOrigin,\n                    trailingSlash: nextConfig.trailingSlash,\n                    previewProps: prerenderManifest.preview,\n                    deploymentId: nextConfig.deploymentId,\n                    enableTainting: nextConfig.experimental.taint,\n                    htmlLimitedBots: nextConfig.htmlLimitedBots,\n                    devtoolSegmentExplorer: nextConfig.experimental.devtoolSegmentExplorer,\n                    reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n                    multiZoneDraftMode,\n                    incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'incrementalCache'),\n                    cacheLifeProfiles: nextConfig.experimental.cacheLife,\n                    basePath: nextConfig.basePath,\n                    serverActions: nextConfig.experimental.serverActions,\n                    ...isDebugStaticShell || isDebugDynamicAccesses ? {\n                        nextExport: true,\n                        supportsDynamicResponse: false,\n                        isStaticGeneration: true,\n                        isRevalidate: true,\n                        isDebugDynamicAccesses: isDebugDynamicAccesses\n                    } : {},\n                    experimental: {\n                        isRoutePPREnabled,\n                        expireTime: nextConfig.expireTime,\n                        staleTimes: nextConfig.experimental.staleTimes,\n                        dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                        clientSegmentCache: Boolean(nextConfig.experimental.clientSegmentCache),\n                        dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n                        inlineCss: Boolean(nextConfig.experimental.inlineCss),\n                        authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n                        clientTraceMetadata: nextConfig.experimental.clientTraceMetadata || []\n                    },\n                    waitUntil: ctx.waitUntil,\n                    onClose: (cb)=>{\n                        res.on('close', cb);\n                    },\n                    onAfterTaskError: ()=>{},\n                    onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext),\n                    err: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'invokeError'),\n                    dev: routeModule.isDev\n                }\n            };\n            const result = await invokeRouteModule(span, context);\n            const { metadata } = result;\n            const { cacheControl, headers = {}, // Add any fetch tags that were on the page to the response headers.\n            fetchTags: cacheTags } = metadata;\n            if (cacheTags) {\n                headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n            }\n            // Pull any fetch metrics from the render onto the request.\n            ;\n            req.fetchMetrics = metadata.fetchMetrics;\n            // we don't throw static to dynamic errors in dev as isSSG\n            // is a best guess in dev since we don't have the prerender pass\n            // to know whether the path is actually static or not\n            if (isSSG && (cacheControl == null ? void 0 : cacheControl.revalidate) === 0 && !routeModule.isDev && !isRoutePPREnabled) {\n                const staticBailoutInfo = metadata.staticBailoutInfo;\n                const err = Object.defineProperty(new Error(`Page changed from static to dynamic at runtime ${resolvedPathname}${(staticBailoutInfo == null ? void 0 : staticBailoutInfo.description) ? `, reason: ${staticBailoutInfo.description}` : ``}` + `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E132\",\n                    enumerable: false,\n                    configurable: true\n                });\n                if (staticBailoutInfo == null ? void 0 : staticBailoutInfo.stack) {\n                    const stack = staticBailoutInfo.stack;\n                    err.stack = err.message + stack.substring(stack.indexOf('\\n'));\n                }\n                throw err;\n            }\n            return {\n                value: {\n                    kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__.CachedRouteKind.APP_PAGE,\n                    html: result,\n                    headers,\n                    rscData: metadata.flightData,\n                    postponed: metadata.postponed,\n                    status: metadata.statusCode,\n                    segmentData: metadata.segmentData\n                },\n                cacheControl\n            };\n        };\n        const responseGenerator = async ({ hasResolved, previousCacheEntry, isRevalidating, span })=>{\n            const isProduction = routeModule.isDev === false;\n            const didRespond = hasResolved || res.writableEnded;\n            // skip on-demand revalidate if cache is not present and\n            // revalidate-if-generated is set\n            if (isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry && !minimalMode) {\n                if (routerServerContext == null ? void 0 : routerServerContext.render404) {\n                    await routerServerContext.render404(req, res);\n                } else {\n                    res.statusCode = 404;\n                    res.end('This page could not be found');\n                }\n                return null;\n            }\n            let fallbackMode;\n            if (prerenderInfo) {\n                fallbackMode = (0,next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.parseFallbackField)(prerenderInfo.fallback);\n            }\n            // When serving a bot request, we want to serve a blocking render and not\n            // the prerendered page. This ensures that the correct content is served\n            // to the bot in the head.\n            if (fallbackMode === next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.PRERENDER && (0,next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_16__.isBot)(userAgent)) {\n                fallbackMode = next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.BLOCKING_STATIC_RENDER;\n            }\n            if ((previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) === -1) {\n                isOnDemandRevalidate = true;\n            }\n            // TODO: adapt for PPR\n            // only allow on-demand revalidate for fallback: true/blocking\n            // or for prerendered fallback: false paths\n            if (isOnDemandRevalidate && (fallbackMode !== next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.NOT_FOUND || previousCacheEntry)) {\n                fallbackMode = next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.BLOCKING_STATIC_RENDER;\n            }\n            if (!minimalMode && fallbackMode !== next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.BLOCKING_STATIC_RENDER && staticPathKey && !didRespond && !isDraftMode && pageIsDynamic && (isProduction || !isPrerendered)) {\n                // if the page has dynamicParams: false and this pathname wasn't\n                // prerendered trigger the no fallback handling\n                if (// In development, fall through to render to handle missing\n                // getStaticPaths.\n                (isProduction || prerenderInfo) && // When fallback isn't present, abort this render so we 404\n                fallbackMode === next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_18__.FallbackMode.NOT_FOUND) {\n                    throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_23__.NoFallbackError();\n                }\n                let fallbackResponse;\n                if (isRoutePPREnabled && !isRSCRequest) {\n                    // We use the response cache here to handle the revalidation and\n                    // management of the fallback shell.\n                    fallbackResponse = await routeModule.handleResponse({\n                        cacheKey: isProduction ? normalizedSrcPage : null,\n                        req,\n                        nextConfig,\n                        routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n                        isFallback: true,\n                        prerenderManifest,\n                        isRoutePPREnabled,\n                        responseGenerator: async ()=>doRender({\n                                span,\n                                // We pass `undefined` as rendering a fallback isn't resumed\n                                // here.\n                                postponed: undefined,\n                                fallbackRouteParams: // If we're in production or we're debugging the fallback\n                                // shell then we should postpone when dynamic params are\n                                // accessed.\n                                isProduction || isDebugFallbackShell ? (0,next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_9__.getFallbackRouteParams)(normalizedSrcPage) : null\n                            }),\n                        waitUntil: ctx.waitUntil\n                    });\n                    // If the fallback response was set to null, then we should return null.\n                    if (fallbackResponse === null) return null;\n                    // Otherwise, if we did get a fallback response, we should return it.\n                    if (fallbackResponse) {\n                        // Remove the cache control from the response to prevent it from being\n                        // used in the surrounding cache.\n                        delete fallbackResponse.cacheControl;\n                        return fallbackResponse;\n                    }\n                }\n            }\n            // Only requests that aren't revalidating can be resumed. If we have the\n            // minimal postponed data, then we should resume the render with it.\n            const postponed = !isOnDemandRevalidate && !isRevalidating && minimalPostponed ? minimalPostponed : undefined;\n            // When we're in minimal mode, if we're trying to debug the static shell,\n            // we should just return nothing instead of resuming the dynamic render.\n            if ((isDebugStaticShell || isDebugDynamicAccesses) && typeof postponed !== 'undefined') {\n                return {\n                    cacheControl: {\n                        revalidate: 1,\n                        expire: undefined\n                    },\n                    value: {\n                        kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__.CachedRouteKind.PAGES,\n                        html: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"].fromStatic(''),\n                        pageData: {},\n                        headers: undefined,\n                        status: undefined\n                    }\n                };\n            }\n            // If this is a dynamic route with PPR enabled and the default route\n            // matches were set, then we should pass the fallback route params to\n            // the renderer as this is a fallback revalidation request.\n            const fallbackRouteParams = pageIsDynamic && isRoutePPREnabled && ((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'renderFallbackShell') || isDebugFallbackShell) ? (0,next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_9__.getFallbackRouteParams)(pathname) : null;\n            // Perform the render.\n            return doRender({\n                span,\n                postponed,\n                fallbackRouteParams\n            });\n        };\n        const handleResponse = async (span)=>{\n            var _cacheEntry_value, _cachedData_headers;\n            const cacheEntry = await routeModule.handleResponse({\n                cacheKey: ssgCacheKey,\n                responseGenerator: (c)=>responseGenerator({\n                        span,\n                        ...c\n                    }),\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n                isOnDemandRevalidate,\n                isRoutePPREnabled,\n                req,\n                nextConfig,\n                prerenderManifest,\n                waitUntil: ctx.waitUntil\n            });\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            // In dev, we should not cache pages for any reason.\n            if (routeModule.isDev) {\n                res.setHeader('Cache-Control', 'no-store, must-revalidate');\n            }\n            if (!cacheEntry) {\n                if (ssgCacheKey) {\n                    // A cache entry might not be generated if a response is written\n                    // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n                    // have a cache key. If we do have a cache key but we don't end up\n                    // with a cache entry, then either Next.js or the application has a\n                    // bug that needs fixing.\n                    throw Object.defineProperty(new Error('invariant: cache entry required but not generated'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E62\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                return null;\n            }\n            if (((_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__.CachedRouteKind.APP_PAGE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant app-page handler received invalid cache entry ${(_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E707\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const didPostpone = typeof cacheEntry.value.postponed === 'string';\n            if (isSSG && // We don't want to send a cache header for requests that contain dynamic\n            // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n            // request, then we should set the cache header.\n            !isDynamicRSCRequest && (!didPostpone || isPrefetchRSCRequest)) {\n                if (!minimalMode) {\n                    // set x-nextjs-cache header to match the header\n                    // we set for the image-optimizer\n                    res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n                }\n                // Set a header used by the client router to signal the response is static\n                // and should respect the `static` cache staleTime value.\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__.NEXT_IS_PRERENDER_HEADER, '1');\n            }\n            const { value: cachedData } = cacheEntry;\n            // Coerce the cache control parameter from the render.\n            let cacheControl;\n            // If this is a resume request in minimal mode it is streamed with dynamic\n            // content and should not be cached.\n            if (minimalPostponed) {\n                cacheControl = {\n                    revalidate: 0,\n                    expire: undefined\n                };\n            } else if (minimalMode && isRSCRequest && !isPrefetchRSCRequest && isRoutePPREnabled) {\n                cacheControl = {\n                    revalidate: 0,\n                    expire: undefined\n                };\n            } else if (!routeModule.isDev) {\n                // If this is a preview mode request, we shouldn't cache it\n                if (isDraftMode) {\n                    cacheControl = {\n                        revalidate: 0,\n                        expire: undefined\n                    };\n                } else if (!isSSG) {\n                    if (!res.getHeader('Cache-Control')) {\n                        cacheControl = {\n                            revalidate: 0,\n                            expire: undefined\n                        };\n                    }\n                } else if (cacheEntry.cacheControl) {\n                    // If the cache entry has a cache control with a revalidate value that's\n                    // a number, use it.\n                    if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n                        var _cacheEntry_cacheControl;\n                        if (cacheEntry.cacheControl.revalidate < 1) {\n                            throw Object.defineProperty(new Error(`Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`), \"__NEXT_ERROR_CODE\", {\n                                value: \"E22\",\n                                enumerable: false,\n                                configurable: true\n                            });\n                        }\n                        cacheControl = {\n                            revalidate: cacheEntry.cacheControl.revalidate,\n                            expire: ((_cacheEntry_cacheControl = cacheEntry.cacheControl) == null ? void 0 : _cacheEntry_cacheControl.expire) ?? nextConfig.expireTime\n                        };\n                    } else {\n                        cacheControl = {\n                            revalidate: next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.CACHE_ONE_YEAR,\n                            expire: undefined\n                        };\n                    }\n                }\n            }\n            cacheEntry.cacheControl = cacheControl;\n            if (typeof segmentPrefetchHeader === 'string' && (cachedData == null ? void 0 : cachedData.kind) === next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__.CachedRouteKind.APP_PAGE && cachedData.segmentData) {\n                var _cachedData_headers1;\n                // This is a prefetch request issued by the client Segment Cache. These\n                // should never reach the application layer (lambda). We should either\n                // respond from the cache (HIT) or respond with 204 No Content (MISS).\n                // Set a header to indicate that PPR is enabled for this route. This\n                // lets the client distinguish between a regular cache miss and a cache\n                // miss due to PPR being disabled. In other contexts this header is used\n                // to indicate that the response contains dynamic data, but here we're\n                // only using it to indicate that the feature is enabled — the segment\n                // response itself contains whether the data is dynamic.\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__.NEXT_DID_POSTPONE_HEADER, '2');\n                // Add the cache tags header to the response if it exists and we're in\n                // minimal mode while rendering a static page.\n                const tags = (_cachedData_headers1 = cachedData.headers) == null ? void 0 : _cachedData_headers1[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER];\n                if (minimalMode && isSSG && tags && typeof tags === 'string') {\n                    res.setHeader(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER, tags);\n                }\n                const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader);\n                if (matchedSegment !== undefined) {\n                    // Cache hit\n                    return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                        req,\n                        res,\n                        type: 'rsc',\n                        generateEtags: nextConfig.generateEtags,\n                        poweredByHeader: nextConfig.poweredByHeader,\n                        result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"].fromStatic(matchedSegment),\n                        cacheControl: cacheEntry.cacheControl\n                    });\n                }\n                // Cache miss. Either a cache entry for this route has not been generated\n                // (which technically should not be possible when PPR is enabled, because\n                // at a minimum there should always be a fallback entry) or there's no\n                // match for the requested segment. Respond with a 204 No Content. We\n                // don't bother to respond with 404, because these requests are only\n                // issued as part of a prefetch.\n                res.statusCode = 204;\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                    req,\n                    res,\n                    type: 'rsc',\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"].fromStatic(''),\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // If there's a callback for `onCacheEntry`, call it with the cache entry\n            // and the revalidate options.\n            const onCacheEntry = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'onCacheEntry');\n            if (onCacheEntry) {\n                const finished = await onCacheEntry({\n                    ...cacheEntry,\n                    // TODO: remove this when upstream doesn't\n                    // always expect this value to be \"PAGE\"\n                    value: {\n                        ...cacheEntry.value,\n                        kind: 'PAGE'\n                    }\n                }, {\n                    url: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'initURL')\n                });\n                if (finished) {\n                    // TODO: maybe we have to end the request?\n                    return null;\n                }\n            }\n            // If the request has a postponed state and it's a resume request we\n            // should error.\n            if (didPostpone && minimalPostponed) {\n                throw Object.defineProperty(new Error('Invariant: postponed state should not be present on a resume request'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E396\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (cachedData.headers) {\n                const headers = {\n                    ...cachedData.headers\n                };\n                if (!minimalMode || !isSSG) {\n                    delete headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER];\n                }\n                for (let [key, value] of Object.entries(headers)){\n                    if (typeof value === 'undefined') continue;\n                    if (Array.isArray(value)) {\n                        for (const v of value){\n                            res.appendHeader(key, v);\n                        }\n                    } else if (typeof value === 'number') {\n                        value = value.toString();\n                        res.appendHeader(key, value);\n                    } else {\n                        res.appendHeader(key, value);\n                    }\n                }\n            }\n            // Add the cache tags header to the response if it exists and we're in\n            // minimal mode while rendering a static page.\n            const tags = (_cachedData_headers = cachedData.headers) == null ? void 0 : _cachedData_headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER];\n            if (minimalMode && isSSG && tags && typeof tags === 'string') {\n                res.setHeader(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_20__.NEXT_CACHE_TAGS_HEADER, tags);\n            }\n            // If the request is a data request, then we shouldn't set the status code\n            // from the response because it should always be 200. This should be gated\n            // behind the experimental PPR flag.\n            if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n                res.statusCode = cachedData.status;\n            }\n            // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n            if (!minimalMode && cachedData.status && next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_26__.RedirectStatusCode[cachedData.status] && isRSCRequest) {\n                res.statusCode = 200;\n            }\n            // Mark that the request did postpone.\n            if (didPostpone) {\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_15__.NEXT_DID_POSTPONE_HEADER, '1');\n            }\n            // we don't go through this block when preview mode is true\n            // as preview mode is a dynamic request (bypasses cache) and doesn't\n            // generate both HTML and payloads in the same request so continue to just\n            // return the generated payload\n            if (isRSCRequest && !isDraftMode) {\n                // If this is a dynamic RSC request, then stream the response.\n                if (typeof cachedData.rscData === 'undefined') {\n                    if (cachedData.postponed) {\n                        throw Object.defineProperty(new Error('Invariant: Expected postponed to be undefined'), \"__NEXT_ERROR_CODE\", {\n                            value: \"E372\",\n                            enumerable: false,\n                            configurable: true\n                        });\n                    }\n                    return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                        req,\n                        res,\n                        type: 'rsc',\n                        generateEtags: nextConfig.generateEtags,\n                        poweredByHeader: nextConfig.poweredByHeader,\n                        result: cachedData.html,\n                        // Dynamic RSC responses cannot be cached, even if they're\n                        // configured with `force-static` because we have no way of\n                        // distinguishing between `force-static` and pages that have no\n                        // postponed state.\n                        // TODO: distinguish `force-static` from pages with no postponed state (static)\n                        cacheControl: isDynamicRSCRequest ? {\n                            revalidate: 0,\n                            expire: undefined\n                        } : cacheEntry.cacheControl\n                    });\n                }\n                // As this isn't a prefetch request, we should serve the static flight\n                // data.\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                    req,\n                    res,\n                    type: 'rsc',\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_19__[\"default\"].fromStatic(cachedData.rscData),\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // This is a request for HTML data.\n            let body = cachedData.html;\n            // If there's no postponed state, we should just serve the HTML. This\n            // should also be the case for a resume request because it's completed\n            // as a server render (rather than a static render).\n            if (!didPostpone || minimalMode) {\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                    req,\n                    res,\n                    type: 'html',\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: body,\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // If we're debugging the static shell or the dynamic API accesses, we\n            // should just serve the HTML without resuming the render. The returned\n            // HTML will be the static shell so all the Dynamic API's will be used\n            // during static generation.\n            if (isDebugStaticShell || isDebugDynamicAccesses) {\n                // Since we're not resuming the render, we need to at least add the\n                // closing body and html tags to create valid HTML.\n                body.chain(new ReadableStream({\n                    start (controller) {\n                        controller.enqueue(next_dist_server_stream_utils_encoded_tags__WEBPACK_IMPORTED_MODULE_21__.ENCODED_TAGS.CLOSED.BODY_AND_HTML);\n                        controller.close();\n                    }\n                }));\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                    req,\n                    res,\n                    type: 'html',\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: body,\n                    cacheControl: {\n                        revalidate: 0,\n                        expire: undefined\n                    }\n                });\n            }\n            // This request has postponed, so let's create a new transformer that the\n            // dynamic data can pipe to that will attach the dynamic data to the end\n            // of the response.\n            const transformer = new TransformStream();\n            body.chain(transformer.readable);\n            // Perform the render again, but this time, provide the postponed state.\n            // We don't await because we want the result to start streaming now, and\n            // we've already chained the transformer's readable to the render result.\n            doRender({\n                span,\n                postponed: cachedData.postponed,\n                // This is a resume render, not a fallback render, so we don't need to\n                // set this.\n                fallbackRouteParams: null\n            }).then(async (result)=>{\n                var _result_value;\n                if (!result) {\n                    throw Object.defineProperty(new Error('Invariant: expected a result to be returned'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E463\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (((_result_value = result.value) == null ? void 0 : _result_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_17__.CachedRouteKind.APP_PAGE) {\n                    var _result_value1;\n                    throw Object.defineProperty(new Error(`Invariant: expected a page response, got ${(_result_value1 = result.value) == null ? void 0 : _result_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E305\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // Pipe the resume result to the transformer.\n                await result.value.html.pipeTo(transformer.writable);\n            }).catch((err)=>{\n                // An error occurred during piping or preparing the render, abort\n                // the transformers writer so we can terminate the stream.\n                transformer.writable.abort(err).catch((e)=>{\n                    console.error(\"couldn't abort transformer\", e);\n                });\n            });\n            return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_22__.sendRenderResult)({\n                req,\n                res,\n                type: 'html',\n                generateEtags: nextConfig.generateEtags,\n                poweredByHeader: nextConfig.poweredByHeader,\n                result: body,\n                // We don't want to cache the response if it has postponed data because\n                // the response being sent to the client it's dynamic parts are streamed\n                // to the client on the same request.\n                cacheControl: {\n                    revalidate: 0,\n                    expire: undefined\n                }\n            });\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            return await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_23__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: srcPage,\n                routeType: 'render',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_2__.getRevalidateReason)({\n                    isRevalidate: isSSG,\n                    isOnDemandRevalidate\n                })\n            }, routerServerContext);\n        }\n        // rethrow so that we can handle serving error page\n        throw err;\n    }\n}\n\n//# sourceMappingURL=app-page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2F_not-found%2Fpage&page=%2F_not-found%2Fpage&appPaths=&pagePath=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Cnode_modules%5C.pnpm%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Cbuiltin%5Cglobal-not-found.js&appDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/ProjectContext.tsx */ \"(rsc)/./contexts/ProjectContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS40LjZfQGJhYmVsK2NvcmVANy4yXzgwNmVmYjQwZThhMTNiN2QzNDZhNDZkMDZkYjA2NDAxL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q2NvbnRleHRzJTVDJTVDUHJvamVjdENvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyUHJvamVjdFByb3ZpZGVyJTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3JhbmRvJTVDJTVDRGVza3RvcCU1QyU1Q25vY29kaWxlJTVDJTVDbm9jb2RpbGUlNUMlNUNub2RlX21vZHVsZXMlNUMlNUMucG5wbSU1QyU1Q25leHQlNDAxNS40LjZfJTQwYmFiZWwlMkJjb3JlJTQwNy4yXzgwNmVmYjQwZThhMTNiN2QzNDZhNDZkMDZkYjA2NDAxJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2ZvbnQlNUMlNUNnb29nbGUlNUMlNUN0YXJnZXQuY3NzJTNGJTdCJTVDJTIycGF0aCU1QyUyMiUzQSU1QyUyMmFwcCU1QyU1QyU1QyU1Q2xheW91dC50c3glNUMlMjIlMkMlNUMlMjJpbXBvcnQlNUMlMjIlM0ElNUMlMjJHZWlzdCU1QyUyMiUyQyU1QyUyMmFyZ3VtZW50cyU1QyUyMiUzQSU1QiU3QiU1QyUyMnZhcmlhYmxlJTVDJTIyJTNBJTVDJTIyLS1mb250LWdlaXN0LXNhbnMlNUMlMjIlMkMlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlN0QlNUQlMkMlNUMlMjJ2YXJpYWJsZU5hbWUlNUMlMjIlM0ElNUMlMjJnZWlzdFNhbnMlNUMlMjIlN0QlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Qy5wbnBtJTVDJTVDbmV4dCU0MDE1LjQuNl8lNDBiYWJlbCUyQmNvcmUlNDA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDElNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMkdlaXN0X01vbm8lNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJ2YXJpYWJsZSU1QyUyMiUzQSU1QyUyMi0tZm9udC1nZWlzdC1tb25vJTVDJTIyJTJDJTVDJTIyc3Vic2V0cyU1QyUyMiUzQSU1QiU1QyUyMmxhdGluJTVDJTIyJTVEJTdEJTVEJTJDJTVDJTIydmFyaWFibGVOYW1lJTVDJTIyJTNBJTVDJTIyZ2Vpc3RNb25vJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3JhbmRvJTVDJTVDRGVza3RvcCU1QyU1Q25vY29kaWxlJTVDJTVDbm9jb2RpbGUlNUMlNUNhcHAlNUMlNUNnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0tBQXFKIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJQcm9qZWN0UHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxyYW5kb1xcXFxEZXNrdG9wXFxcXG5vY29kaWxlXFxcXG5vY29kaWxlXFxcXGNvbnRleHRzXFxcXFByb2plY3RDb250ZXh0LnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-page.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-segment.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/layout-router.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/metadata-boundary.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/metadata-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/render-from-template-context.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/metadata/generate/icon-mark.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/metadata/generate/icon-mark.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js */ \"(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./contexts/ProjectContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ProjectContext.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectProvider: () => (/* binding */ ProjectProvider),\n/* harmony export */   useProjectContext: () => (/* binding */ useProjectContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api */ \"(ssr)/./lib/api.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/logger */ \"(ssr)/./lib/logger.ts\");\n/* __next_internal_client_entry_do_not_use__ useProjectContext,ProjectProvider auto */ \n\n\n\nconst ProjectContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useProjectContext = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ProjectContext);\n    if (!context) {\n        throw new Error('useProjectContext must be used within a ProjectProvider');\n    }\n    return context;\n};\nconst ProjectProvider = ({ children })=>{\n    const [projects, setProjects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load projects from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ProjectProvider.useEffect\": ()=>{\n            const loadFromStorage = {\n                \"ProjectProvider.useEffect.loadFromStorage\": ()=>{\n                    try {\n                        const stored = localStorage.getItem('nocodile_projects');\n                        if (stored) {\n                            const parsed = JSON.parse(stored);\n                            const projectMap = new Map();\n                            Object.entries(parsed).forEach({\n                                \"ProjectProvider.useEffect.loadFromStorage\": ([key, value])=>{\n                                    projectMap.set(key, value);\n                                }\n                            }[\"ProjectProvider.useEffect.loadFromStorage\"]);\n                            setProjects(projectMap);\n                            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Loaded projects from localStorage', {\n                                count: projectMap.size\n                            });\n                        }\n                    } catch (error) {\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to load projects from localStorage', {\n                            error: error instanceof Error ? error.message : String(error)\n                        });\n                    }\n                }\n            }[\"ProjectProvider.useEffect.loadFromStorage\"];\n            loadFromStorage();\n        }\n    }[\"ProjectProvider.useEffect\"], []);\n    // Save projects to localStorage whenever projects change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ProjectProvider.useEffect\": ()=>{\n            try {\n                const projectsObj = Object.fromEntries(projects);\n                localStorage.setItem('nocodile_projects', JSON.stringify(projectsObj));\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug('PROJECT_CONTEXT', 'Saved projects to localStorage', {\n                    count: projects.size\n                });\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to save projects to localStorage', {\n                    error: error instanceof Error ? error.message : String(error)\n                });\n            }\n        }\n    }[\"ProjectProvider.useEffect\"], [\n        projects\n    ]);\n    const getProject = (projectId)=>{\n        return projects.get(projectId) || null;\n    };\n    const updateProject = (projectId, details)=>{\n        setProjects((prev)=>{\n            const newMap = new Map(prev);\n            const existing = newMap.get(projectId) || {\n                id: projectId,\n                name: 'Loading...',\n                description: 'Loading...',\n                videoCount: 0,\n                imageCount: 0,\n                status: 'Unknown',\n                lastUpdated: new Date().toISOString()\n            };\n            const updated = {\n                ...existing,\n                ...details,\n                lastUpdated: new Date().toISOString()\n            };\n            newMap.set(projectId, updated);\n            return newMap;\n        });\n    };\n    const refreshProject = async (projectId)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Refreshing project details', {\n                projectId\n            });\n            const projectDetails = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.ApiService.getProjectDetails(parseInt(projectId));\n            const updatedDetails = {\n                id: projectId,\n                name: projectDetails[\"project name\"] || \"Unknown Project\",\n                description: projectDetails[\"project type\"] || \"No description available\",\n                videoCount: projectDetails[\"video count\"] || 0,\n                imageCount: 0,\n                status: projectDetails[\"status\"] || \"Active\",\n                lastUpdated: new Date().toISOString()\n            };\n            updateProject(projectId, updatedDetails);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Project details refreshed successfully', {\n                projectId,\n                name: updatedDetails.name\n            });\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to refresh project details', {\n                projectId,\n                error: errorMessage\n            });\n            setError(errorMessage);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const refreshAllProjects = async ()=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Refreshing all projects');\n            // Get all project IDs from current projects\n            const projectIds = Array.from(projects.keys());\n            if (projectIds.length === 0) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'No projects to refresh');\n                return;\n            }\n            // Refresh each project\n            await Promise.all(projectIds.map((id)=>refreshProject(id)));\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'All projects refreshed successfully');\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to refresh all projects', {\n                error: errorMessage\n            });\n            setError(errorMessage);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const value = {\n        projects,\n        getProject,\n        updateProject,\n        refreshProject,\n        refreshAllProjects,\n        isLoading,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ProjectContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\contexts\\\\ProjectContext.tsx\",\n        lineNumber: 195,\n        columnNumber: 5\n    }, undefined);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./contexts/ProjectContext.tsx\n");

/***/ }),

/***/ "(ssr)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: () => (/* binding */ ApiService),\n/* harmony export */   findWorkingBackendUrl: () => (/* binding */ findWorkingBackendUrl)\n/* harmony export */ });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(ssr)/./lib/logger.ts\");\n// API service for connecting frontend to backend\n\n// Utility function to validate and fix image data\nfunction validateAndFixImageData(imageData) {\n    if (!imageData || typeof imageData !== 'string') {\n        console.warn('⚠️ [API] Invalid image data: not a string or empty');\n        return '';\n    }\n    // 檢查是否已經是正確的 data URL 格式\n    if (imageData.startsWith('data:image/')) {\n        // 驗證 data URL 格式是否完整\n        if (imageData.includes('base64,') && imageData.length > 50) {\n            return imageData; // 已經是正確格式，直接返回\n        } else {\n            console.warn('⚠️ [API] Incomplete data URL detected, attempting to fix');\n        }\n    }\n    // 檢查是否為 PNG 格式的 base64 (優先檢查 PNG，因為它更特定)\n    if (imageData.startsWith('iVBORw0KGgo')) {\n        console.log('🔧 [API] Detected PNG base64 data, fixing format');\n        return `data:image/png;base64,${imageData}`;\n    }\n    // 檢查是否為 JPEG 格式的 base64\n    if (imageData.startsWith('/9j/') || imageData.startsWith('9j/')) {\n        console.log('🔧 [API] Detected JPEG base64 data, fixing format');\n        return `data:image/jpeg;base64,${imageData}`;\n    }\n    // 如果沒有 data: 前綴，假設為 JPEG 格式\n    if (!imageData.startsWith('data:')) {\n        console.log('🔧 [API] Raw base64 data detected, adding data URL prefix');\n        return `data:image/jpeg;base64,${imageData}`;\n    }\n    // 如果數據太短，可能是無效的\n    if (imageData.length < 20) {\n        console.warn('⚠️ [API] Image data too short, likely invalid');\n        return '';\n    }\n    return imageData;\n}\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8888';\n// Fallback URLs to try if the primary URL fails\nconst FALLBACK_URLS = [\n    'http://localhost:8888',\n    'http://host.docker.internal:8888',\n    'http://backend:8888'\n];\n// Function to find a working backend URL\nasync function findWorkingBackendUrl() {\n    // First try the environment variable URL\n    const envUrl = process.env.NEXT_PUBLIC_API_URL;\n    if (envUrl) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('CONNECTION', 'Testing environment variable URL first', {\n            url: envUrl\n        });\n        const startTime = Date.now();\n        try {\n            const response = await fetch(`${envUrl}/health`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, true, duration);\n                return envUrl;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, false, duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('CONNECTION', `Environment URL at ${envUrl} returned status: ${response.status}`);\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, false, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', `Environment URL at ${envUrl} failed`, {\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    }\n    _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('CONNECTION', 'Environment URL failed, trying fallback URLs', {\n        urls: FALLBACK_URLS\n    });\n    for (const url of FALLBACK_URLS){\n        const startTime = Date.now();\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.debug('CONNECTION', `Testing backend URL: ${url}`);\n            const response = await fetch(`${url}/health`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, true, duration);\n                return url;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, false, duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('CONNECTION', `Backend at ${url} returned status: ${response.status}`);\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, false, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', `Backend at ${url} failed`, {\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    }\n    _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', 'All backend URLs failed - no working backend found');\n    throw new Error('無法連接到任何後端服務');\n}\n// API functions\nclass ApiService {\n    // Static method to find working backend URL\n    static async findWorkingBackendUrl() {\n        return findWorkingBackendUrl();\n    }\n    // Helper method for consistent API logging\n    static async makeApiCall(endpoint, method, body, useWorkingUrl = false) {\n        const startTime = Date.now();\n        const baseUrl = useWorkingUrl ? await findWorkingBackendUrl() : API_BASE_URL;\n        const fullUrl = `${baseUrl}${endpoint}`;\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, method, body);\n        try {\n            const response = await fetch(fullUrl, {\n                method,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: body ? JSON.stringify(body) : undefined\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, method, response.status, duration);\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, method, new Error(`HTTP ${response.status}`), duration);\n            }\n            return response;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, method, error, duration);\n            throw error;\n        }\n    }\n    // Upload video file\n    static async uploadVideo(projectId, file) {\n        const startTime = Date.now();\n        const endpoint = '/upload';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                fileName: file.name,\n                fileSize: file.size\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // Create URL with project_id as query parameter\n            const url = new URL(`${workingUrl}${endpoint}`);\n            url.searchParams.append('project_id', projectId);\n            // Create FormData for file upload (only file, not project_id)\n            const formData = new FormData();\n            formData.append('file', file);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                body: formData\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(`HTTP ${response.status}`), duration);\n                throw new Error(`Upload failed: HTTP ${response.status}`);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, {\n                videoId: data.video_id,\n                fileSize: data.file_size\n            });\n            return {\n                success: true,\n                message: data.message || 'Upload successful',\n                video_id: data.video_id,\n                video_path: data.video_path,\n                file_size: data.file_size,\n                project_id: data.project_id\n            };\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error uploading video', {\n                projectId,\n                fileName: file.name,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Fallback videos when API fails\n    static getFallbackVideos() {\n        return [];\n    }\n    // Get all projects for a user\n    static async getProjectsInfo(userId) {\n        const startTime = Date.now();\n        const endpoint = '/get_projects_info';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                userId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userID: userId.toString()\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback data`);\n                return this.getFallbackProjects();\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                ownedProjects: data['owned projects']?.length || 0,\n                sharedProjects: data['shared projects']?.length || 0\n            });\n            // Check if we got valid data\n            if (!data || !data['owned projects'] && !data['shared projects']) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid API response format, using fallback data', data);\n                return this.getFallbackProjects();\n            }\n            // Transform the response to match our ProjectInfo interface\n            const ownedProjects = data['owned projects'] || [];\n            const sharedProjects = data['shared projects'] || [];\n            // If no projects found, return fallback\n            if (ownedProjects.length === 0 && sharedProjects.length === 0) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', 'No projects found in response, using fallback data');\n                return this.getFallbackProjects();\n            }\n            // Convert project details to ProjectInfo format\n            const allProjects = [\n                ...ownedProjects,\n                ...sharedProjects\n            ];\n            const projectDetails = allProjects.map((project)=>({\n                    id: project.project_id || project.id,\n                    name: project.project_name || 'Unknown Project',\n                    videoCount: project.video_count || 0,\n                    imageCount: project.image_count || 0,\n                    status: project.status || 'Unknown',\n                    description: project.project_type || 'No description',\n                    isOwned: project.is_owned || false\n                }));\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', `Successfully processed ${projectDetails.length} projects`, {\n                owned: ownedProjects.length,\n                shared: sharedProjects.length\n            });\n            return projectDetails;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching projects info, using fallback data', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackProjects();\n        }\n    }\n    // Fallback data when API fails\n    static getFallbackProjects() {\n        return [\n            {\n                id: 1,\n                name: \"Sample Project 1\",\n                videoCount: 0,\n                imageCount: 0,\n                description: \"This is a sample project (API unavailable)\",\n                status: \"Not started\"\n            },\n            {\n                id: 2,\n                name: \"Sample Project 2\",\n                videoCount: 0,\n                imageCount: 0,\n                description: \"This is another sample project (API unavailable)\",\n                status: \"Not started\"\n            }\n        ];\n    }\n    // Get project details\n    static async getProjectDetails(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_project_details';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId.toString()\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching project details', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Create new project\n    static async createProject(userId, projectName, projectType) {\n        const startTime = Date.now();\n        const endpoint = '/create_project';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                userId,\n                projectName,\n                projectType\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userID: userId.toString(),\n                    project_name: projectName,\n                    project_type: projectType\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error creating project', {\n                userId,\n                projectName,\n                projectType,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Change project name\n    static async changeProjectName(projectId, newName) {\n        try {\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/change_project_name`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId.toString(),\n                    new_name: newName\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error changing project name:', error);\n            throw error;\n        }\n    }\n    // ========== Annotation API Methods ==========\n    // Get classes for a project\n    static async getClasses(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_classes';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback classes`);\n                return this.getFallbackClasses();\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                classCount: data.classes ? Object.keys(data.classes).length : 0\n            });\n            // 將後端返回的對象格式轉換為前端期望的數組格式\n            if (data.classes && typeof data.classes === 'object') {\n                const classesArray = Object.entries(data.classes).map(([name, color])=>({\n                        id: name,\n                        name: name,\n                        color: color\n                    }));\n                return classesArray;\n            }\n            return this.getFallbackClasses();\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching classes, using fallback data', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackClasses();\n        }\n    }\n    // Add a new class\n    static async addClass(projectId, className, color) {\n        const startTime = Date.now();\n        const endpoint = '/add_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                className,\n                color\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數 - 注意後端期望 'colour' 而不是 'color'\n            const url = new URL(`${workingUrl}${endpoint}`);\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('class_name', className);\n            url.searchParams.append('colour', color); // 後端期望 'colour' 參數\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(`HTTP ${response.status}`), duration);\n                // 嘗試解析錯誤響應\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        throw new Error(`HTTP ${response.status}: ${errorData.message}`);\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            // 驗證響應數據格式\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error adding class', {\n                projectId,\n                className,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 提供更詳細的錯誤信息\n            if (error instanceof Error) {\n                if (error.message.includes('HTTP 422')) {\n                    throw new Error(`類別名稱可能已存在或格式不正確: ${error.message}`);\n                } else if (error.message.includes('HTTP 500')) {\n                    throw new Error(`服務器內部錯誤，請稍後再試: ${error.message}`);\n                } else if (error.message.includes('fetch')) {\n                    throw new Error(`網絡連接錯誤，請檢查網絡連接: ${error.message}`);\n                }\n            }\n            throw error;\n        }\n    }\n    // Modify a class\n    static async modifyClass(projectId, originalName, newName) {\n        const startTime = Date.now();\n        const endpoint = '/modify_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                originalName,\n                newName\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數 - 注意後端期望的參數名稱\n            const url = new URL(`${workingUrl}${endpoint}`);\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('original_class_name', originalName);\n            url.searchParams.append('new_class_name', newName);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(`HTTP ${response.status}`), duration);\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error modifying class, using fallback response', {\n                projectId,\n                originalName,\n                newName,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 返回模擬成功響應\n            return {\n                success: true,\n                message: `Class '${originalName}' modified to '${newName}' successfully (frontend fallback).`,\n                classes: this.getFallbackClasses()\n            };\n        }\n    }\n    // Delete a class\n    static async deleteClass(projectId, className) {\n        const startTime = Date.now();\n        const endpoint = '/delete_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                className\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數\n            const url = new URL(`${workingUrl}${endpoint}`);\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('class_name', className);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    class_name: className\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(`HTTP ${response.status}`), duration);\n                // 嘗試解析錯誤響應\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        throw new Error(`HTTP ${response.status}: ${errorData.message}`);\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            // 驗證響應數據格式\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error deleting class', {\n                projectId,\n                className,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 提供更詳細的錯誤信息\n            if (error instanceof Error) {\n                if (error.message.includes('HTTP 404')) {\n                    throw new Error(`類別 '${className}' 不存在: ${error.message}`);\n                } else if (error.message.includes('HTTP 500')) {\n                    throw new Error(`服務器內部錯誤，請稍後再試: ${error.message}`);\n                } else if (error.message.includes('fetch')) {\n                    throw new Error(`網絡連接錯誤，請檢查網絡連接: ${error.message}`);\n                }\n            }\n            throw error;\n        }\n    }\n    // Get next frame to annotate\n    static async getNextFrameToAnnotate(projectId, videoId, currentFrame = 0) {\n        const startTime = Date.now();\n        const endpoint = '/get_next_frame_to_annotate';\n        try {\n            // 驗證和清理輸入參數\n            const cleanProjectId = projectId.toString().replace(/\\D/g, '');\n            // 直接使用傳入的視頻 ID（應該是資料庫中的唯一 ID）\n            const cleanVideoId = videoId.toString();\n            if (!cleanProjectId || !cleanVideoId || cleanVideoId === \"undefined\" || cleanVideoId === \"\") {\n                throw new Error(`Invalid parameters: projectId=${projectId}, videoId=${videoId}`);\n            }\n            const projectIdInt = parseInt(cleanProjectId);\n            if (isNaN(projectIdInt)) {\n                throw new Error(`Invalid project ID: ${projectIdInt}`);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId: projectIdInt,\n                videoId: cleanVideoId,\n                currentFrame\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectIdInt,\n                    video_id: cleanVideoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                // 特別處理431錯誤\n                if (response.status === 431) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `431 Request Header Fields Too Large - clearing storage and retrying`);\n                    // 清除可能過大的本地存儲\n                    try {\n                        localStorage.removeItem('large_session_data');\n                        sessionStorage.clear();\n                        // 清除所有可能的過大數據\n                        Object.keys(localStorage).forEach((key)=>{\n                            if (localStorage.getItem(key) && localStorage.getItem(key).length > 10000) {\n                                localStorage.removeItem(key);\n                            }\n                        });\n                    } catch (storageError) {\n                        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Could not clear storage:', storageError);\n                    }\n                }\n                // 特殊處理 500 錯誤\n                if (response.status === 500) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Server internal error (500) - possible causes: video file missing, OpenCV issues, or database problems');\n                    try {\n                        const errorData = await response.json();\n                        if (errorData.error) {\n                            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Server error details:', errorData.error);\n                        }\n                    } catch (parseError) {\n                        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Could not parse server error response');\n                    }\n                }\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback data`);\n                return this.getFallbackFrameData(projectId, videoId);\n            }\n            const data = await response.json();\n            // 驗證響應數據結構\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            // 處理不同的後端響應格式\n            let processedData = {\n                ...data\n            };\n            // 如果後端返回的是元組格式 (next_frame, frame_num)\n            if (Array.isArray(data)) {\n                const [nextFrame, frameNum] = data;\n                processedData = {\n                    success: true,\n                    message: \"Next frame fetched successfully.\",\n                    image: nextFrame,\n                    frame_id: frameNum,\n                    frame_num: frameNum,\n                    total_frames: 150 // 默認值\n                };\n            }\n            // 處理後端返回 None 的情況\n            if (processedData.image === null || processedData.image === undefined) {\n                processedData = {\n                    success: false,\n                    message: \"No more frames to annotate\",\n                    image: null,\n                    frame_id: null,\n                    frame_num: null,\n                    total_frames: processedData.total_frames || 150\n                };\n            }\n            // Validate and fix image data if needed\n            if (processedData.image && typeof processedData.image === 'string') {\n                processedData.image = validateAndFixImageData(processedData.image);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                hasImage: !!processedData.image,\n                success: processedData.success,\n                frameId: processedData.frame_id\n            });\n            return processedData;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching next frame, using fallback data', {\n                projectId,\n                videoId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackFrameData(projectId, videoId);\n        }\n    }\n    // Fallback frame data when API fails\n    static getFallbackFrameData(projectId, videoId) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Using fallback frame data due to API failure', {\n            projectId,\n            videoId\n        });\n        return {\n            success: false,\n            message: \"Unable to fetch frame from server. Please check your connection and try again.\",\n            image: null,\n            frame_id: null,\n            frame_num: null,\n            total_frames: 150,\n            error: \"API_ERROR\"\n        };\n    }\n    // Get specific frame by frame number\n    static async getFrame(projectId, videoId, frameNum) {\n        const startTime = Date.now();\n        const endpoint = '/get_frame';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                videoId,\n                frameNum\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}?frame_num=${frameNum}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    video_id: videoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback data`);\n                return this.getFallbackFrameData(projectId, videoId);\n            }\n            const data = await response.json();\n            // Validate and fix image data if needed\n            if (data.image && typeof data.image === 'string') {\n                data.image = validateAndFixImageData(data.image);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                hasImage: !!data.image\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching frame, using fallback data', {\n                projectId,\n                videoId,\n                frameNum,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackFrameData(projectId, videoId);\n        }\n    }\n    // Check annotation status with retry logic\n    static async checkAnnotationStatus(projectId, videoId, retryCount = 0) {\n        const startTime = Date.now();\n        const endpoint = '/check_annotation_status';\n        // 檢查是否有已知的API問題，直接返回fallback數據 (only in browser)\n        const hasKnownApiIssues =  false && 0;\n        if (hasKnownApiIssues && retryCount === 0) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', 'Known API issues detected, using fallback data immediately');\n            return this.getFallbackAnnotationStatus();\n        }\n        const maxRetries = 1; // 減少重試次數\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                videoId,\n                retryCount\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    video_id: videoId\n                }),\n                // 添加超時設置\n                signal: AbortSignal.timeout(3000) // 減少到3秒超時\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback data`);\n                // 對於500錯誤，記錄並立即返回fallback數據\n                if (response.status === 500) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Server error detected, marking API as problematic');\n                    if (false) {}\n                    return this.getFallbackAnnotationStatus();\n                }\n                return this.getFallbackAnnotationStatus();\n            }\n            // 清除API問題標記\n            if (false) {}\n            const data = await response.json();\n            // 驗證返回的數據格式\n            if (!data || typeof data !== 'object') {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid API response format, using fallback data');\n                return this.getFallbackAnnotationStatus();\n            }\n            // 確保必要的字段存在\n            const result = {\n                \"annotation status\": data[\"annotation status\"] || \"not yet started\",\n                \"last annotated frame\": data[\"last annotated frame\"] || 0\n            };\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, result);\n            return result;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', `Error checking annotation status (attempt ${retryCount + 1})`, {\n                projectId,\n                videoId,\n                retryCount,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 記錄API問題\n            if (false) {}\n            // 如果是網絡錯誤且還有重試次數，則重試\n            if (retryCount < maxRetries && error instanceof Error && (error.name === 'TypeError' || error.name === 'AbortError')) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', `Retrying API call... (${retryCount + 1}/${maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, 500)); // 減少等待時間\n                return this.checkAnnotationStatus(projectId, videoId, retryCount + 1);\n            }\n            // 返回模擬數據\n            return this.getFallbackAnnotationStatus();\n        }\n    }\n    // Fallback annotation status when API fails\n    static getFallbackAnnotationStatus() {\n        return {\n            \"annotation status\": \"not yet started\",\n            \"last annotated frame\": 0\n        };\n    }\n    // Save annotation with improved error handling and retry logic\n    static async saveAnnotation(annotationData, retryCount = 0) {\n        const startTime = Date.now();\n        const endpoint = '/annotate';\n        const maxRetries = 3;\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId: annotationData.project_id,\n                videoId: annotationData.video_id,\n                frameNum: annotationData.frame_num,\n                bboxCount: annotationData.bboxes.length,\n                retryCount\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            // 確保資料結構正確並修復數據類型問題\n            const normalizedData = {\n                project_id: parseInt(annotationData.project_id.toString()),\n                video_id: annotationData.video_id.toString(),\n                frame_num: Math.floor(Number(annotationData.frame_num)),\n                bboxes: annotationData.bboxes.map((bbox)=>({\n                        class_name: bbox.class_name || bbox.class,\n                        x: Math.max(0, Number(bbox.x)),\n                        y: Math.max(0, Number(bbox.y)),\n                        width: Math.max(1, Number(bbox.width)),\n                        height: Math.max(1, Number(bbox.height)) // 確保大於0\n                    }))\n            };\n            // 驗證數據\n            if (isNaN(normalizedData.project_id) || normalizedData.project_id <= 0) {\n                throw new Error('Invalid project_id: must be a positive integer');\n            }\n            if (!normalizedData.video_id || normalizedData.video_id === 'undefined') {\n                throw new Error('Invalid video_id: must be a valid string');\n            }\n            if (isNaN(normalizedData.frame_num) || normalizedData.frame_num < 0) {\n                throw new Error('Invalid frame_num: must be a non-negative integer');\n            }\n            if (!Array.isArray(normalizedData.bboxes) || normalizedData.bboxes.length === 0) {\n                throw new Error('Invalid bboxes: must be a non-empty array');\n            }\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(normalizedData)\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                // 嘗試解析錯誤響應以獲取更詳細的信息\n                let errorMessage = `HTTP ${response.status}`;\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        errorMessage = `${errorData.message} (HTTP ${response.status})`;\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                // 特殊處理 422 錯誤\n                if (response.status === 422) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `422 Unprocessable Entity: ${errorMessage}`);\n                    throw new Error(`數據格式錯誤: ${errorMessage}`);\n                }\n                // 如果是 500 錯誤且還有重試次數，則重試\n                if (response.status >= 500 && retryCount < maxRetries) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `Server error ${response.status}, retrying... (attempt ${retryCount + 1}/${maxRetries})`);\n                    await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1))); // 指數退避\n                    return this.saveAnnotation(annotationData, retryCount + 1);\n                }\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(errorMessage), duration);\n                throw new Error(errorMessage);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return {\n                success: data.success || true,\n                message: data.message || 'Annotation saved successfully',\n                savedAt: new Date().toISOString()\n            };\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            // 如果是網路錯誤且還有重試次數，則重試\n            if (retryCount < maxRetries && (error instanceof TypeError || error instanceof Error && error.message.includes('fetch'))) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `Network error, retrying... (attempt ${retryCount + 1}/${maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1)));\n                return this.saveAnnotation(annotationData, retryCount + 1);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error saving annotation via API, using frontend fallback', {\n                projectId: annotationData.project_id,\n                videoId: annotationData.video_id,\n                frameNum: annotationData.frame_num,\n                bboxCount: annotationData.bboxes.length,\n                retryCount,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 返回模擬成功響應\n            return {\n                success: true,\n                message: `Annotation saved successfully (frontend fallback). ${annotationData.bboxes.length} bounding boxes processed.`,\n                savedAt: new Date().toISOString()\n            };\n        }\n    }\n    // Get next video\n    static async getNextVideo(projectId, currentVideoId) {\n        const startTime = Date.now();\n        const endpoint = '/next_video';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                currentVideoId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    current_video_id: currentVideoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `API returned ${response.status}, using fallback data`);\n                return this.getFallbackVideoData(currentVideoId);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                nextVideoId: data.next_video_id\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error getting next video, using fallback data', {\n                projectId,\n                currentVideoId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackVideoData(currentVideoId);\n        }\n    }\n    // Fallback video data when API fails\n    static getFallbackVideoData(currentVideoId) {\n        // 簡單的循環邏輯：如果當前是video_1，返回video_2，否則返回video_1\n        const nextVideoId = currentVideoId === \"video_1\" ? \"video_2\" : \"video_1\";\n        return {\n            success: true,\n            message: \"Next video fetched successfully (fallback mode).\",\n            next_video_id: nextVideoId\n        };\n    }\n    // Fallback classes when API fails\n    static getFallbackClasses() {\n        return [\n            {\n                id: \"give_way_sign\",\n                name: \"give_way_sign\",\n                color: \"#fbbf24\"\n            },\n            {\n                id: \"pedestrian_child\",\n                name: \"pedestrian_child\",\n                color: \"#3b82f6\"\n            },\n            {\n                id: \"zebra_crossing_sign\",\n                name: \"zebra_crossing_sign\",\n                color: \"#8b5cf6\"\n            },\n            {\n                id: \"traffic_light_red\",\n                name: \"traffic_light_red\",\n                color: \"#10b981\"\n            },\n            {\n                id: \"stop_sign\",\n                name: \"stop_sign\",\n                color: \"#ef4444\"\n            }\n        ];\n    }\n    // ========== Training API Methods ==========\n    // Start training\n    static async startTraining(projectId) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/train`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error starting training:', error);\n            return {\n                success: true,\n                message: \"Training started successfully (frontend fallback).\"\n            };\n        }\n    }\n    // Get training progress\n    static async getTrainingProgress(projectId) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/get_training_progress`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(`API returned ${response.status}, using fallback data`);\n                return this.getFallbackTrainingProgress();\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching training progress:', error);\n            return this.getFallbackTrainingProgress();\n        }\n    }\n    // Create dataset\n    static async createDataset(projectId) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/create_dataset`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error creating dataset:', error);\n            return {\n                success: true,\n                message: \"Dataset creation started successfully (frontend fallback).\"\n            };\n        }\n    }\n    // Get auto annotation progress\n    static async getAutoAnnotationProgress(projectId) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/get_auto_annotation_progress`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(`API returned ${response.status}, using fallback data`);\n                return this.getFallbackAutoAnnotationProgress();\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching auto annotation progress:', error);\n            return this.getFallbackAutoAnnotationProgress();\n        }\n    }\n    // Fallback training progress when API fails\n    static getFallbackTrainingProgress() {\n        return {\n            success: true,\n            status: \"Training completed\",\n            progress: 100\n        };\n    }\n    // Fallback auto annotation progress when API fails\n    static getFallbackAutoAnnotationProgress() {\n        return {\n            success: true,\n            progress: 1.0\n        };\n    }\n    // ========== Deployment API Methods ==========\n    // Get model performance metrics\n    static async getModelPerformance(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_model_performance';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(`HTTP ${response.status}`), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', `Backend returned ${response.status}, using fallback data`);\n                return this.getFallbackModelPerformance();\n            }\n            const data = await response.json();\n            // Validate the response structure\n            if (!data || !data[\"model performance\"]) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid response structure from backend, using fallback data');\n                return this.getFallbackModelPerformance();\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                performance: data[\"model performance\"]\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching model performance from backend, using fallback data', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackModelPerformance();\n        }\n    }\n    // Get model file paths\n    static async getModelPath(projectId) {\n        try {\n            const response = await fetch(`${API_BASE_URL}/get_model_path`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(`API returned ${response.status}, using fallback data`);\n                return this.getFallbackModelPath();\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching model path:', error);\n            return this.getFallbackModelPath();\n        }\n    }\n    // Fallback model performance data when API fails\n    static getFallbackModelPerformance() {\n        return {\n            success: true,\n            \"model performance\": {\n                mAP: 0.92,\n                precision: 0.94,\n                recall: 0.89,\n                f1_score: 0.91,\n                accuracy: 0.88,\n                status: \"Fallback data (backend unavailable)\"\n            }\n        };\n    }\n    // Fallback model path data when API fails\n    static getFallbackModelPath() {\n        return {\n            success: true,\n            \"model path\": {\n                onnx_path: \"/models/project_1/model.onnx\",\n                pytorch_path: \"/models/project_1/model.pth\",\n                config_path: \"/models/project_1/config.json\",\n                weights_path: \"/models/project_1/weights.pt\"\n            }\n        };\n    }\n    // ========== Debug API Methods ==========\n    // Get all available routes\n    static async getAvailableRoutes() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/debug/routes`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching available routes:', error);\n            return {\n                available_routes: []\n            };\n        }\n    }\n    // Get project debug information\n    static async getProjectDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/debug/project/${projectId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching project debug info:', error);\n            return {\n                project_id: projectId,\n                opencv_available: false,\n                current_working_dir: '',\n                project_paths: [],\n                video_files: [],\n                total_videos: 0\n            };\n        }\n    }\n    // Get frame debug information\n    static async getFrameDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/debug/frames/${projectId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching frame debug info:', error);\n            return {\n                project_id: projectId,\n                opencv_available: false,\n                found_videos: [],\n                frame_info: [],\n                total_videos: 0,\n                current_working_dir: ''\n            };\n        }\n    }\n    // Get video debug information\n    static async getVideoDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/debug/videos/${projectId}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching video debug info:', error);\n            return {\n                project_id: projectId,\n                found_videos: [],\n                total_count: 0,\n                path_status: [],\n                opencv_available: false,\n                current_working_dir: ''\n            };\n        }\n    }\n    // ========== Enhanced Training API Methods ==========\n    // Get training status with enhanced error handling\n    static async getTrainingStatus(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/get_training_progress`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(`API returned ${response.status}, using fallback data`);\n                return this.getFallbackTrainingStatus();\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching training status:', error);\n            return this.getFallbackTrainingStatus();\n        }\n    }\n    // Fallback training status when API fails\n    static getFallbackTrainingStatus() {\n        return {\n            success: true,\n            status: \"Not started\",\n            progress: 0,\n            message: \"Training status unavailable (fallback mode)\"\n        };\n    }\n    // ========== Model Download API Methods ==========\n    // Download model file with proper error handling\n    static async downloadModelFile(projectId, modelType) {\n        try {\n            // First get the model paths\n            const pathData = await this.getModelPath(projectId);\n            if (!pathData.success) {\n                return {\n                    success: false,\n                    error: 'Failed to get model paths'\n                };\n            }\n            const modelPaths = pathData[\"model path\"];\n            let downloadPath;\n            switch(modelType){\n                case 'onnx':\n                    downloadPath = modelPaths.onnx_path;\n                    break;\n                case 'pytorch':\n                    downloadPath = modelPaths.pytorch_path;\n                    break;\n                case 'weights':\n                    downloadPath = modelPaths.weights_path;\n                    break;\n                case 'config':\n                    downloadPath = modelPaths.config_path;\n                    break;\n            }\n            if (!downloadPath) {\n                return {\n                    success: false,\n                    error: `${modelType} model not available`\n                };\n            }\n            return {\n                success: true,\n                downloadUrl: downloadPath\n            };\n        } catch (error) {\n            console.error('Error downloading model file:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    // ========== Health Check API Methods ==========\n    // Check backend health\n    static async checkBackendHealth() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/health`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error checking backend health:', error);\n            return {\n                status: 'unhealthy',\n                message: 'Backend health check failed'\n            };\n        }\n    }\n    // Test backend connection\n    static async testBackendConnection() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(`${workingUrl}/test`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error testing backend connection:', error);\n            return {\n                message: 'Backend connection test failed',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get uploaded videos for a project\n    static async getUploadedVideos(projectId) {\n        const startTime = Date.now();\n        const endpoint = `/get_project_videos/${projectId}`;\n        try {\n            // 驗證和清理輸入參數\n            const cleanProjectId = projectId.toString().replace(/\\D/g, '');\n            if (!cleanProjectId || cleanProjectId === \"undefined\" || cleanProjectId === \"\") {\n                throw new Error(`Invalid project ID: ${projectId}`);\n            }\n            const projectIdInt = parseInt(cleanProjectId);\n            if (isNaN(projectIdInt)) {\n                throw new Error(`Invalid project ID: ${projectIdInt}`);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'GET', {\n                projectId: projectIdInt\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = `${workingUrl}${endpoint}`;\n            const response = await fetch(fullUrl, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', `Server error (${response.status}) - possible causes: project not found, database issues`);\n                const errorText = await response.text();\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', `Server error details: ${errorText}`);\n                throw new Error(`HTTP ${response.status}`);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(endpoint, 'GET', response.status, duration);\n            // 返回視頻列表，確保格式正確\n            if (data && data.success && Array.isArray(data.videos)) {\n                return data.videos;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'API returned unexpected format, using fallback');\n                return [];\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'GET', error, duration);\n            // 返回空數組作為fallback\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Using fallback data for videos');\n            return [];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/api.ts\n");

/***/ }),

/***/ "(ssr)/./lib/logger.ts":
/*!***********************!*\
  !*** ./lib/logger.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n// Centralized logging utility for API monitoring and debugging\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    return LogLevel;\n}({});\nclass Logger {\n    constructor(){\n        this.logs = [];\n        this.maxLogs = 1000; // Keep last 1000 logs\n        this.currentLevel = 1;\n        this.listeners = [];\n        // Load log level from localStorage or default to INFO (only in browser)\n        if (false) {}\n    }\n    addLog(level, category, message, data, url, status, duration) {\n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            level,\n            category,\n            message,\n            data,\n            url,\n            status,\n            duration\n        };\n        this.logs.unshift(logEntry);\n        // Keep only the last maxLogs entries\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(0, this.maxLogs);\n        }\n        // Notify listeners\n        this.listeners.forEach((listener)=>listener([\n                ...this.logs\n            ]));\n        // Console output with colors and better formatting\n        const levelNames = [\n            'DEBUG',\n            'INFO',\n            'WARN',\n            'ERROR'\n        ];\n        const colors = [\n            '#888',\n            '#2196F3',\n            '#FF9800',\n            '#F44336'\n        ];\n        const levelName = levelNames[level];\n        const color = colors[level];\n        // Enhanced console output with timestamp and better formatting\n        const timestamp = new Date().toLocaleTimeString();\n        const urlInfo = url ? ` → ${url}` : '';\n        const statusInfo = status ? ` (${status})` : '';\n        const durationInfo = duration ? ` [${duration}ms]` : '';\n        console.log(`%c[${timestamp}] %c[${levelName}] %c[${category}] %c${message}${urlInfo}${statusInfo}${durationInfo}`, `color: #666; font-size: 11px;`, `color: ${color}; font-weight: bold; font-size: 12px;`, `color: #666; font-size: 11px;`, `color: #000; font-size: 12px;`, data ? data : '');\n    }\n    debug(category, message, data) {\n        if (this.currentLevel <= 0) {\n            this.addLog(0, category, message, data);\n        }\n    }\n    info(category, message, data) {\n        if (this.currentLevel <= 1) {\n            this.addLog(1, category, message, data);\n        }\n    }\n    warn(category, message, data) {\n        if (this.currentLevel <= 2) {\n            this.addLog(2, category, message, data);\n        }\n    }\n    error(category, message, data) {\n        if (this.currentLevel <= 3) {\n            this.addLog(3, category, message, data);\n        }\n    }\n    // API-specific logging methods\n    apiCall(url, method, data) {\n        this.info('API', `Making ${method} request to ${url}`, data);\n    }\n    apiSuccess(url, method, status, duration, response) {\n        this.info('API', `${method} ${url} - Success (${status})`, {\n            duration: `${duration}ms`,\n            response\n        });\n    }\n    apiError(url, method, error, duration) {\n        this.error('API', `${method} ${url} - Failed`, {\n            error: error.message || error,\n            duration: duration ? `${duration}ms` : 'N/A'\n        });\n    }\n    apiTimeout(url, method, duration) {\n        this.warn('API', `${method} ${url} - Timeout after ${duration}ms`);\n    }\n    connectionTest(url, success, duration) {\n        if (success) {\n            this.info('CONNECTION', `✅ Backend connection successful: ${url}`, {\n                duration: duration ? `${duration}ms` : 'N/A'\n            });\n        } else {\n            this.warn('CONNECTION', `❌ Backend connection failed: ${url}`, {\n                duration: duration ? `${duration}ms` : 'N/A'\n            });\n        }\n    }\n    // Get all logs\n    getLogs() {\n        return [\n            ...this.logs\n        ];\n    }\n    // Get logs by category\n    getLogsByCategory(category) {\n        return this.logs.filter((log)=>log.category === category);\n    }\n    // Get logs by level\n    getLogsByLevel(level) {\n        return this.logs.filter((log)=>log.level === level);\n    }\n    // Clear logs\n    clearLogs() {\n        this.logs = [];\n        this.listeners.forEach((listener)=>listener([]));\n    }\n    // Set log level\n    setLogLevel(level) {\n        this.currentLevel = level;\n        if (false) {}\n    }\n    // Subscribe to log updates\n    subscribe(listener) {\n        this.listeners.push(listener);\n        return ()=>{\n            const index = this.listeners.indexOf(listener);\n            if (index > -1) {\n                this.listeners.splice(index, 1);\n            }\n        };\n    }\n    // Get API health summary\n    getApiHealthSummary() {\n        const apiLogs = this.getLogsByCategory('API');\n        const totalCalls = apiLogs.length;\n        const successfulCalls = apiLogs.filter((log)=>log.status && log.status >= 200 && log.status < 300).length;\n        const failedCalls = apiLogs.filter((log)=>log.status && (log.status < 200 || log.status >= 300)).length;\n        const responseTimes = apiLogs.filter((log)=>log.duration).map((log)=>log.duration);\n        const averageResponseTime = responseTimes.length > 0 ? responseTimes.reduce((sum, time)=>sum + time, 0) / responseTimes.length : 0;\n        const lastSuccessfulCall = apiLogs.filter((log)=>log.status && log.status >= 200 && log.status < 300).sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0]?.timestamp;\n        const lastFailedCall = apiLogs.filter((log)=>log.status && (log.status < 200 || log.status >= 300)).sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0]?.timestamp;\n        return {\n            totalCalls,\n            successfulCalls,\n            failedCalls,\n            averageResponseTime: Math.round(averageResponseTime),\n            lastSuccessfulCall,\n            lastFailedCall\n        };\n    }\n}\n// Export singleton instance\nconst logger = new Logger();\n// Make logger available globally for console debugging\nif (false) {}\n// Export convenience functions\nconst log = {\n    debug: (category, message, data)=>logger.debug(category, message, data),\n    info: (category, message, data)=>logger.info(category, message, data),\n    warn: (category, message, data)=>logger.warn(category, message, data),\n    error: (category, message, data)=>logger.error(category, message, data),\n    apiCall: (url, method, data)=>logger.apiCall(url, method, data),\n    apiSuccess: (url, method, status, duration, response)=>logger.apiSuccess(url, method, status, duration, response),\n    apiError: (url, method, error, duration)=>logger.apiError(url, method, error, duration),\n    apiTimeout: (url, method, duration)=>logger.apiTimeout(url, method, duration),\n    connectionTest: (url, success, duration)=>logger.connectionTest(url, success, duration)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/logger.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/ProjectContext.tsx */ \"(ssr)/./contexts/ProjectContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS40LjZfQGJhYmVsK2NvcmVANy4yXzgwNmVmYjQwZThhMTNiN2QzNDZhNDZkMDZkYjA2NDAxL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q2NvbnRleHRzJTVDJTVDUHJvamVjdENvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyUHJvamVjdFByb3ZpZGVyJTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3JhbmRvJTVDJTVDRGVza3RvcCU1QyU1Q25vY29kaWxlJTVDJTVDbm9jb2RpbGUlNUMlNUNub2RlX21vZHVsZXMlNUMlNUMucG5wbSU1QyU1Q25leHQlNDAxNS40LjZfJTQwYmFiZWwlMkJjb3JlJTQwNy4yXzgwNmVmYjQwZThhMTNiN2QzNDZhNDZkMDZkYjA2NDAxJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDbmV4dCU1QyU1Q2ZvbnQlNUMlNUNnb29nbGUlNUMlNUN0YXJnZXQuY3NzJTNGJTdCJTVDJTIycGF0aCU1QyUyMiUzQSU1QyUyMmFwcCU1QyU1QyU1QyU1Q2xheW91dC50c3glNUMlMjIlMkMlNUMlMjJpbXBvcnQlNUMlMjIlM0ElNUMlMjJHZWlzdCU1QyUyMiUyQyU1QyUyMmFyZ3VtZW50cyU1QyUyMiUzQSU1QiU3QiU1QyUyMnZhcmlhYmxlJTVDJTIyJTNBJTVDJTIyLS1mb250LWdlaXN0LXNhbnMlNUMlMjIlMkMlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlN0QlNUQlMkMlNUMlMjJ2YXJpYWJsZU5hbWUlNUMlMjIlM0ElNUMlMjJnZWlzdFNhbnMlNUMlMjIlN0QlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Qy5wbnBtJTVDJTVDbmV4dCU0MDE1LjQuNl8lNDBiYWJlbCUyQmNvcmUlNDA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDElNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMkdlaXN0X01vbm8lNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJ2YXJpYWJsZSU1QyUyMiUzQSU1QyUyMi0tZm9udC1nZWlzdC1tb25vJTVDJTIyJTJDJTVDJTIyc3Vic2V0cyU1QyUyMiUzQSU1QiU1QyUyMmxhdGluJTVDJTIyJTVEJTdEJTVEJTJDJTVDJTIydmFyaWFibGVOYW1lJTVDJTIyJTNBJTVDJTIyZ2Vpc3RNb25vJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3JhbmRvJTVDJTVDRGVza3RvcCU1QyU1Q25vY29kaWxlJTVDJTVDbm9jb2RpbGUlNUMlNUNhcHAlNUMlNUNnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZzZXJ2ZXI9dHJ1ZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0tBQXFKIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJQcm9qZWN0UHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxyYW5kb1xcXFxEZXNrdG9wXFxcXG5vY29kaWxlXFxcXG5vY29kaWxlXFxcXGNvbnRleHRzXFxcXFByb2plY3RDb250ZXh0LnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/builtin/global-error.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-page.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-segment.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/metadata-boundary.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/metadata/metadata-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/metadata/generate/icon-mark.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/lib/metadata/generate/icon-mark.js\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js */ \"(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cbuiltin%5C%5Cglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Chttp-access-fallback%5C%5Cerror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Clayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Casync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Cmetadata%5C%5Cmetadata-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cclient%5C%5Ccomponents%5C%5Crender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Clib%5C%5Cmetadata%5C%5Cgenerate%5C%5Cicon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cdist%5C%5Cnext-devtools%5C%5Cuserspace%5C%5Capp%5C%5Csegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/dynamic-access-async-storage.external":
/*!***************************************************************************************!*\
  !*** external "next/dist/server/app-render/dynamic-access-async-storage.external.js" ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/dynamic-access-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/is-bot":
/*!***********************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-bot" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-bot");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401","vendor-chunks/@swc+helpers@0.5.15"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2F_not-found%2Fpage&page=%2F_not-found%2Fpage&appPaths=&pagePath=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Cnode_modules%5C.pnpm%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5Cnode_modules%5Cnext%5Cdist%5Cclient%5Ccomponents%5Cbuiltin%5Cglobal-not-found.js&appDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Crando%5CDesktop%5Cnocodile%5Cnocodile&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();