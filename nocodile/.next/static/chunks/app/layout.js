/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"b7011c916d3d\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xccmFuZG9cXERlc2t0b3BcXG5vY29kaWxlXFxub2NvZGlsZVxcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImI3MDExYzkxNmQzZFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./contexts/ProjectContext.tsx":
/*!*************************************!*\
  !*** ./contexts/ProjectContext.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectProvider: () => (/* binding */ ProjectProvider),\n/* harmony export */   useProjectContext: () => (/* binding */ useProjectContext)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./lib/api.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/logger */ \"(app-pages-browser)/./lib/logger.ts\");\n/* __next_internal_client_entry_do_not_use__ useProjectContext,ProjectProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst ProjectContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useProjectContext = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ProjectContext);\n    if (!context) {\n        throw new Error('useProjectContext must be used within a ProjectProvider');\n    }\n    return context;\n};\n_s(useProjectContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ProjectProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [projects, setProjects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load projects from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ProjectProvider.useEffect\": ()=>{\n            const loadFromStorage = {\n                \"ProjectProvider.useEffect.loadFromStorage\": ()=>{\n                    try {\n                        const stored = localStorage.getItem('nocodile_projects');\n                        if (stored) {\n                            const parsed = JSON.parse(stored);\n                            const projectMap = new Map();\n                            Object.entries(parsed).forEach({\n                                \"ProjectProvider.useEffect.loadFromStorage\": (param)=>{\n                                    let [key, value] = param;\n                                    projectMap.set(key, value);\n                                }\n                            }[\"ProjectProvider.useEffect.loadFromStorage\"]);\n                            setProjects(projectMap);\n                            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Loaded projects from localStorage', {\n                                count: projectMap.size\n                            });\n                        }\n                    } catch (error) {\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to load projects from localStorage', {\n                            error: error instanceof Error ? error.message : String(error)\n                        });\n                    }\n                }\n            }[\"ProjectProvider.useEffect.loadFromStorage\"];\n            loadFromStorage();\n        }\n    }[\"ProjectProvider.useEffect\"], []);\n    // Save projects to localStorage whenever projects change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ProjectProvider.useEffect\": ()=>{\n            try {\n                const projectsObj = Object.fromEntries(projects);\n                localStorage.setItem('nocodile_projects', JSON.stringify(projectsObj));\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug('PROJECT_CONTEXT', 'Saved projects to localStorage', {\n                    count: projects.size\n                });\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to save projects to localStorage', {\n                    error: error instanceof Error ? error.message : String(error)\n                });\n            }\n        }\n    }[\"ProjectProvider.useEffect\"], [\n        projects\n    ]);\n    const getProject = (projectId)=>{\n        return projects.get(projectId) || null;\n    };\n    const updateProject = (projectId, details)=>{\n        setProjects((prev)=>{\n            const newMap = new Map(prev);\n            const existing = newMap.get(projectId) || {\n                id: projectId,\n                name: 'Loading...',\n                description: 'Loading...',\n                videoCount: 0,\n                imageCount: 0,\n                status: 'Unknown',\n                lastUpdated: new Date().toISOString()\n            };\n            const updated = {\n                ...existing,\n                ...details,\n                lastUpdated: new Date().toISOString()\n            };\n            newMap.set(projectId, updated);\n            return newMap;\n        });\n    };\n    const refreshProject = async (projectId)=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Refreshing project details', {\n                projectId\n            });\n            const projectDetails = await _lib_api__WEBPACK_IMPORTED_MODULE_2__.ApiService.getProjectDetails(parseInt(projectId));\n            const updatedDetails = {\n                id: projectId,\n                name: projectDetails[\"project name\"] || \"Unknown Project\",\n                description: projectDetails[\"project type\"] || \"No description available\",\n                videoCount: projectDetails[\"video count\"] || 0,\n                imageCount: 0,\n                status: projectDetails[\"status\"] || \"Active\",\n                lastUpdated: new Date().toISOString()\n            };\n            updateProject(projectId, updatedDetails);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Project details refreshed successfully', {\n                projectId,\n                name: updatedDetails.name\n            });\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to refresh project details', {\n                projectId,\n                error: errorMessage\n            });\n            setError(errorMessage);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const refreshAllProjects = async ()=>{\n        setIsLoading(true);\n        setError(null);\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'Refreshing all projects');\n            // Get all project IDs from current projects\n            const projectIds = Array.from(projects.keys());\n            if (projectIds.length === 0) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'No projects to refresh');\n                return;\n            }\n            // Refresh each project\n            await Promise.all(projectIds.map((id)=>refreshProject(id)));\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info('PROJECT_CONTEXT', 'All projects refreshed successfully');\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error('PROJECT_CONTEXT', 'Failed to refresh all projects', {\n                error: errorMessage\n            });\n            setError(errorMessage);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const value = {\n        projects,\n        getProject,\n        updateProject,\n        refreshProject,\n        refreshAllProjects,\n        isLoading,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ProjectContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\rando\\\\Desktop\\\\nocodile\\\\nocodile\\\\contexts\\\\ProjectContext.tsx\",\n        lineNumber: 195,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ProjectProvider, \"SoCRbENOX7/AY4Tf+BC7VnPl6zI=\");\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/ProjectContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: () => (/* binding */ ApiService),\n/* harmony export */   findWorkingBackendUrl: () => (/* binding */ findWorkingBackendUrl)\n/* harmony export */ });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(app-pages-browser)/./lib/logger.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/polyfills/process.js\");\n// API service for connecting frontend to backend\n\n// Utility function to validate and fix image data\nfunction validateAndFixImageData(imageData) {\n    if (!imageData || typeof imageData !== 'string') {\n        console.warn('⚠️ [API] Invalid image data: not a string or empty');\n        return '';\n    }\n    // 檢查是否已經是正確的 data URL 格式\n    if (imageData.startsWith('data:image/')) {\n        // 驗證 data URL 格式是否完整\n        if (imageData.includes('base64,') && imageData.length > 50) {\n            return imageData; // 已經是正確格式，直接返回\n        } else {\n            console.warn('⚠️ [API] Incomplete data URL detected, attempting to fix');\n        }\n    }\n    // 檢查是否為 PNG 格式的 base64 (優先檢查 PNG，因為它更特定)\n    if (imageData.startsWith('iVBORw0KGgo')) {\n        console.log('🔧 [API] Detected PNG base64 data, fixing format');\n        return \"data:image/png;base64,\".concat(imageData);\n    }\n    // 檢查是否為 JPEG 格式的 base64\n    if (imageData.startsWith('/9j/') || imageData.startsWith('9j/')) {\n        console.log('🔧 [API] Detected JPEG base64 data, fixing format');\n        return \"data:image/jpeg;base64,\".concat(imageData);\n    }\n    // 如果沒有 data: 前綴，假設為 JPEG 格式\n    if (!imageData.startsWith('data:')) {\n        console.log('🔧 [API] Raw base64 data detected, adding data URL prefix');\n        return \"data:image/jpeg;base64,\".concat(imageData);\n    }\n    // 如果數據太短，可能是無效的\n    if (imageData.length < 20) {\n        console.warn('⚠️ [API] Image data too short, likely invalid');\n        return '';\n    }\n    return imageData;\n}\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8888';\n// Fallback URLs to try if the primary URL fails\nconst FALLBACK_URLS = [\n    'http://localhost:8888',\n    'http://host.docker.internal:8888',\n    'http://backend:8888'\n];\n// Function to find a working backend URL\nasync function findWorkingBackendUrl() {\n    // First try the environment variable URL\n    const envUrl = process.env.NEXT_PUBLIC_API_URL;\n    if (envUrl) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('CONNECTION', 'Testing environment variable URL first', {\n            url: envUrl\n        });\n        const startTime = Date.now();\n        try {\n            const response = await fetch(\"\".concat(envUrl, \"/health\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, true, duration);\n                return envUrl;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, false, duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('CONNECTION', \"Environment URL at \".concat(envUrl, \" returned status: \").concat(response.status));\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(envUrl, false, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', \"Environment URL at \".concat(envUrl, \" failed\"), {\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    }\n    _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('CONNECTION', 'Environment URL failed, trying fallback URLs', {\n        urls: FALLBACK_URLS\n    });\n    for (const url of FALLBACK_URLS){\n        const startTime = Date.now();\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.debug('CONNECTION', \"Testing backend URL: \".concat(url));\n            const response = await fetch(\"\".concat(url, \"/health\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, true, duration);\n                return url;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, false, duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('CONNECTION', \"Backend at \".concat(url, \" returned status: \").concat(response.status));\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.connectionTest(url, false, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', \"Backend at \".concat(url, \" failed\"), {\n                error: error instanceof Error ? error.message : String(error)\n            });\n        }\n    }\n    _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('CONNECTION', 'All backend URLs failed - no working backend found');\n    throw new Error('無法連接到任何後端服務');\n}\n// API functions\nclass ApiService {\n    // Static method to find working backend URL\n    static async findWorkingBackendUrl() {\n        return findWorkingBackendUrl();\n    }\n    // Helper method for consistent API logging\n    static async makeApiCall(endpoint, method, body) {\n        let useWorkingUrl = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n        const startTime = Date.now();\n        const baseUrl = useWorkingUrl ? await findWorkingBackendUrl() : API_BASE_URL;\n        const fullUrl = \"\".concat(baseUrl).concat(endpoint);\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, method, body);\n        try {\n            const response = await fetch(fullUrl, {\n                method,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: body ? JSON.stringify(body) : undefined\n            });\n            const duration = Date.now() - startTime;\n            if (response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, method, response.status, duration);\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, method, new Error(\"HTTP \".concat(response.status)), duration);\n            }\n            return response;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, method, error, duration);\n            throw error;\n        }\n    }\n    // Upload video file\n    static async uploadVideo(projectId, file) {\n        const startTime = Date.now();\n        const endpoint = '/upload';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                fileName: file.name,\n                fileSize: file.size\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // Create URL with project_id as query parameter\n            const url = new URL(\"\".concat(workingUrl).concat(endpoint));\n            url.searchParams.append('project_id', projectId);\n            // Create FormData for file upload (only file, not project_id)\n            const formData = new FormData();\n            formData.append('file', file);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                body: formData\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                throw new Error(\"Upload failed: HTTP \".concat(response.status));\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, {\n                videoId: data.video_id,\n                fileSize: data.file_size\n            });\n            return {\n                success: true,\n                message: data.message || 'Upload successful',\n                video_id: data.video_id,\n                video_path: data.video_path,\n                file_size: data.file_size,\n                project_id: data.project_id\n            };\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error uploading video', {\n                projectId,\n                fileName: file.name,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Fallback videos when API fails\n    static getFallbackVideos() {\n        return [];\n    }\n    // Get all projects for a user\n    static async getProjectsInfo(userId) {\n        const startTime = Date.now();\n        const endpoint = '/get_projects_info';\n        try {\n            var _data_ownedprojects, _data_sharedprojects;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                userId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userID: userId.toString()\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackProjects();\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                ownedProjects: ((_data_ownedprojects = data['owned projects']) === null || _data_ownedprojects === void 0 ? void 0 : _data_ownedprojects.length) || 0,\n                sharedProjects: ((_data_sharedprojects = data['shared projects']) === null || _data_sharedprojects === void 0 ? void 0 : _data_sharedprojects.length) || 0\n            });\n            // Check if we got valid data\n            if (!data || !data['owned projects'] && !data['shared projects']) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid API response format, using fallback data', data);\n                return this.getFallbackProjects();\n            }\n            // Transform the response to match our ProjectInfo interface\n            const ownedProjects = data['owned projects'] || [];\n            const sharedProjects = data['shared projects'] || [];\n            // If no projects found, return fallback\n            if (ownedProjects.length === 0 && sharedProjects.length === 0) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', 'No projects found in response, using fallback data');\n                return this.getFallbackProjects();\n            }\n            // Convert project details to ProjectInfo format\n            const allProjects = [\n                ...ownedProjects,\n                ...sharedProjects\n            ];\n            const projectDetails = allProjects.map((project)=>({\n                    id: project.project_id || project.id,\n                    name: project.project_name || 'Unknown Project',\n                    videoCount: project.video_count || 0,\n                    imageCount: project.image_count || 0,\n                    status: project.status || 'Unknown',\n                    description: project.project_type || 'No description',\n                    isOwned: project.is_owned || false\n                }));\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', \"Successfully processed \".concat(projectDetails.length, \" projects\"), {\n                owned: ownedProjects.length,\n                shared: sharedProjects.length\n            });\n            return projectDetails;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching projects info, using fallback data', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackProjects();\n        }\n    }\n    // Fallback data when API fails\n    static getFallbackProjects() {\n        return [\n            {\n                id: 1,\n                name: \"Sample Project 1\",\n                videoCount: 0,\n                imageCount: 0,\n                description: \"This is a sample project (API unavailable)\",\n                status: \"Not started\"\n            },\n            {\n                id: 2,\n                name: \"Sample Project 2\",\n                videoCount: 0,\n                imageCount: 0,\n                description: \"This is another sample project (API unavailable)\",\n                status: \"Not started\"\n            }\n        ];\n    }\n    // Get project details\n    static async getProjectDetails(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_project_details';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId.toString()\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching project details', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Create new project\n    static async createProject(userId, projectName, projectType) {\n        const startTime = Date.now();\n        const endpoint = '/create_project';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                userId,\n                projectName,\n                projectType\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userID: userId.toString(),\n                    project_name: projectName,\n                    project_type: projectType\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error creating project', {\n                userId,\n                projectName,\n                projectType,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            throw error;\n        }\n    }\n    // Change project name\n    static async changeProjectName(projectId, newName) {\n        try {\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/change_project_name\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId.toString(),\n                    new_name: newName\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error changing project name:', error);\n            throw error;\n        }\n    }\n    // ========== Annotation API Methods ==========\n    // Get classes for a project\n    static async getClasses(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_classes';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback classes\"));\n                return this.getFallbackClasses();\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                classCount: data.classes ? Object.keys(data.classes).length : 0\n            });\n            // 將後端返回的對象格式轉換為前端期望的數組格式\n            if (data.classes && typeof data.classes === 'object') {\n                const classesArray = Object.entries(data.classes).map((param)=>{\n                    let [name, color] = param;\n                    return {\n                        id: name,\n                        name: name,\n                        color: color\n                    };\n                });\n                return classesArray;\n            }\n            return this.getFallbackClasses();\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching classes, using fallback data', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackClasses();\n        }\n    }\n    // Add a new class\n    static async addClass(projectId, className, color) {\n        const startTime = Date.now();\n        const endpoint = '/add_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                className,\n                color\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數 - 注意後端期望 'colour' 而不是 'color'\n            const url = new URL(\"\".concat(workingUrl).concat(endpoint));\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('class_name', className);\n            url.searchParams.append('colour', color); // 後端期望 'colour' 參數\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                // 嘗試解析錯誤響應\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorData.message));\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            // 驗證響應數據格式\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error adding class', {\n                projectId,\n                className,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 提供更詳細的錯誤信息\n            if (error instanceof Error) {\n                if (error.message.includes('HTTP 422')) {\n                    throw new Error(\"類別名稱可能已存在或格式不正確: \".concat(error.message));\n                } else if (error.message.includes('HTTP 500')) {\n                    throw new Error(\"服務器內部錯誤，請稍後再試: \".concat(error.message));\n                } else if (error.message.includes('fetch')) {\n                    throw new Error(\"網絡連接錯誤，請檢查網絡連接: \".concat(error.message));\n                }\n            }\n            throw error;\n        }\n    }\n    // Modify a class\n    static async modifyClass(projectId, originalName, newName) {\n        const startTime = Date.now();\n        const endpoint = '/modify_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                originalName,\n                newName\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數 - 注意後端期望的參數名稱\n            const url = new URL(\"\".concat(workingUrl).concat(endpoint));\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('original_class_name', originalName);\n            url.searchParams.append('new_class_name', newName);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error modifying class, using fallback response', {\n                projectId,\n                originalName,\n                newName,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 返回模擬成功響應\n            return {\n                success: true,\n                message: \"Class '\".concat(originalName, \"' modified to '\").concat(newName, \"' successfully (frontend fallback).\"),\n                classes: this.getFallbackClasses()\n            };\n        }\n    }\n    // Delete a class\n    static async deleteClass(projectId, className) {\n        const startTime = Date.now();\n        const endpoint = '/delete_class';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                className\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            // 使用查詢參數\n            const url = new URL(\"\".concat(workingUrl).concat(endpoint));\n            url.searchParams.append('project_id', projectId);\n            url.searchParams.append('class_name', className);\n            const response = await fetch(url.toString(), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    class_name: className\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(url.toString(), 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                // 嘗試解析錯誤響應\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorData.message));\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            // 驗證響應數據格式\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(url.toString(), 'POST', response.status, duration, data);\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error deleting class', {\n                projectId,\n                className,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 提供更詳細的錯誤信息\n            if (error instanceof Error) {\n                if (error.message.includes('HTTP 404')) {\n                    throw new Error(\"類別 '\".concat(className, \"' 不存在: \").concat(error.message));\n                } else if (error.message.includes('HTTP 500')) {\n                    throw new Error(\"服務器內部錯誤，請稍後再試: \".concat(error.message));\n                } else if (error.message.includes('fetch')) {\n                    throw new Error(\"網絡連接錯誤，請檢查網絡連接: \".concat(error.message));\n                }\n            }\n            throw error;\n        }\n    }\n    // Get next frame to annotate\n    static async getNextFrameToAnnotate(projectId, videoId) {\n        let currentFrame = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const startTime = Date.now();\n        const endpoint = '/get_next_frame_to_annotate';\n        try {\n            // 驗證和清理輸入參數\n            const cleanProjectId = projectId.toString().replace(/\\D/g, '');\n            // 直接使用傳入的視頻 ID（應該是資料庫中的唯一 ID）\n            const cleanVideoId = videoId.toString();\n            if (!cleanProjectId || !cleanVideoId || cleanVideoId === \"undefined\" || cleanVideoId === \"\") {\n                throw new Error(\"Invalid parameters: projectId=\".concat(projectId, \", videoId=\").concat(videoId));\n            }\n            const projectIdInt = parseInt(cleanProjectId);\n            if (isNaN(projectIdInt)) {\n                throw new Error(\"Invalid project ID: \".concat(projectIdInt));\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId: projectIdInt,\n                videoId: cleanVideoId,\n                currentFrame\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectIdInt,\n                    video_id: cleanVideoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                // 特別處理431錯誤\n                if (response.status === 431) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"431 Request Header Fields Too Large - clearing storage and retrying\");\n                    // 清除可能過大的本地存儲\n                    try {\n                        localStorage.removeItem('large_session_data');\n                        sessionStorage.clear();\n                        // 清除所有可能的過大數據\n                        Object.keys(localStorage).forEach((key)=>{\n                            if (localStorage.getItem(key) && localStorage.getItem(key).length > 10000) {\n                                localStorage.removeItem(key);\n                            }\n                        });\n                    } catch (storageError) {\n                        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Could not clear storage:', storageError);\n                    }\n                }\n                // 特殊處理 500 錯誤\n                if (response.status === 500) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Server internal error (500) - possible causes: video file missing, OpenCV issues, or database problems');\n                    try {\n                        const errorData = await response.json();\n                        if (errorData.error) {\n                            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Server error details:', errorData.error);\n                        }\n                    } catch (parseError) {\n                        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Could not parse server error response');\n                    }\n                }\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackFrameData(projectId, videoId);\n            }\n            const data = await response.json();\n            // 驗證響應數據結構\n            if (!data || typeof data !== 'object') {\n                throw new Error('Invalid response format from server');\n            }\n            // 處理不同的後端響應格式\n            let processedData = {\n                ...data\n            };\n            // 如果後端返回的是元組格式 (next_frame, frame_num)\n            if (Array.isArray(data)) {\n                const [nextFrame, frameNum] = data;\n                processedData = {\n                    success: true,\n                    message: \"Next frame fetched successfully.\",\n                    image: nextFrame,\n                    frame_id: frameNum,\n                    frame_num: frameNum,\n                    total_frames: 150 // 默認值\n                };\n            }\n            // 處理後端返回 None 的情況\n            if (processedData.image === null || processedData.image === undefined) {\n                processedData = {\n                    success: false,\n                    message: \"No more frames to annotate\",\n                    image: null,\n                    frame_id: null,\n                    frame_num: null,\n                    total_frames: processedData.total_frames || 150\n                };\n            }\n            // Validate and fix image data if needed\n            if (processedData.image && typeof processedData.image === 'string') {\n                processedData.image = validateAndFixImageData(processedData.image);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                hasImage: !!processedData.image,\n                success: processedData.success,\n                frameId: processedData.frame_id\n            });\n            return processedData;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching next frame, using fallback data', {\n                projectId,\n                videoId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackFrameData(projectId, videoId);\n        }\n    }\n    // Fallback frame data when API fails\n    static getFallbackFrameData(projectId, videoId) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Using fallback frame data due to API failure', {\n            projectId,\n            videoId\n        });\n        return {\n            success: false,\n            message: \"Unable to fetch frame from server. Please check your connection and try again.\",\n            image: null,\n            frame_id: null,\n            frame_num: null,\n            total_frames: 150,\n            error: \"API_ERROR\"\n        };\n    }\n    // Get specific frame by frame number\n    static async getFrame(projectId, videoId, frameNum) {\n        const startTime = Date.now();\n        const endpoint = '/get_frame';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                videoId,\n                frameNum\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint, \"?frame_num=\").concat(frameNum);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    video_id: videoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackFrameData(projectId, videoId);\n            }\n            const data = await response.json();\n            // Validate and fix image data if needed\n            if (data.image && typeof data.image === 'string') {\n                data.image = validateAndFixImageData(data.image);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                hasImage: !!data.image\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching frame, using fallback data', {\n                projectId,\n                videoId,\n                frameNum,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackFrameData(projectId, videoId);\n        }\n    }\n    // Check annotation status with retry logic\n    static async checkAnnotationStatus(projectId, videoId) {\n        let retryCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const startTime = Date.now();\n        const endpoint = '/check_annotation_status';\n        // 檢查是否有已知的API問題，直接返回fallback數據 (only in browser)\n        const hasKnownApiIssues =  true && window.localStorage && localStorage.getItem('api_500_error') === 'true';\n        if (hasKnownApiIssues && retryCount === 0) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', 'Known API issues detected, using fallback data immediately');\n            return this.getFallbackAnnotationStatus();\n        }\n        const maxRetries = 1; // 減少重試次數\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                videoId,\n                retryCount\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    video_id: videoId\n                }),\n                // 添加超時設置\n                signal: AbortSignal.timeout(3000) // 減少到3秒超時\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback data\"));\n                // 對於500錯誤，記錄並立即返回fallback數據\n                if (response.status === 500) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Server error detected, marking API as problematic');\n                    if ( true && window.localStorage) {\n                        localStorage.setItem('api_500_error', 'true');\n                    }\n                    return this.getFallbackAnnotationStatus();\n                }\n                return this.getFallbackAnnotationStatus();\n            }\n            // 清除API問題標記\n            if ( true && window.localStorage) {\n                localStorage.removeItem('api_500_error');\n            }\n            const data = await response.json();\n            // 驗證返回的數據格式\n            if (!data || typeof data !== 'object') {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid API response format, using fallback data');\n                return this.getFallbackAnnotationStatus();\n            }\n            // 確保必要的字段存在\n            const result = {\n                \"annotation status\": data[\"annotation status\"] || \"not yet started\",\n                \"last annotated frame\": data[\"last annotated frame\"] || 0\n            };\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, result);\n            return result;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', \"Error checking annotation status (attempt \".concat(retryCount + 1, \")\"), {\n                projectId,\n                videoId,\n                retryCount,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 記錄API問題\n            if ( true && window.localStorage) {\n                localStorage.setItem('api_500_error', 'true');\n            }\n            // 如果是網絡錯誤且還有重試次數，則重試\n            if (retryCount < maxRetries && error instanceof Error && (error.name === 'TypeError' || error.name === 'AbortError')) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.info('API', \"Retrying API call... (\".concat(retryCount + 1, \"/\").concat(maxRetries, \")\"));\n                await new Promise((resolve)=>setTimeout(resolve, 500)); // 減少等待時間\n                return this.checkAnnotationStatus(projectId, videoId, retryCount + 1);\n            }\n            // 返回模擬數據\n            return this.getFallbackAnnotationStatus();\n        }\n    }\n    // Fallback annotation status when API fails\n    static getFallbackAnnotationStatus() {\n        return {\n            \"annotation status\": \"not yet started\",\n            \"last annotated frame\": 0\n        };\n    }\n    // Save annotation with improved error handling and retry logic\n    static async saveAnnotation(annotationData) {\n        let retryCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const startTime = Date.now();\n        const endpoint = '/annotate';\n        const maxRetries = 3;\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId: annotationData.project_id,\n                videoId: annotationData.video_id,\n                frameNum: annotationData.frame_num,\n                bboxCount: annotationData.bboxes.length,\n                retryCount\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            // 確保資料結構正確並修復數據類型問題\n            const normalizedData = {\n                project_id: parseInt(annotationData.project_id.toString()),\n                video_id: annotationData.video_id.toString(),\n                frame_num: Math.floor(Number(annotationData.frame_num)),\n                bboxes: annotationData.bboxes.map((bbox)=>({\n                        class_name: bbox.class_name || bbox.class,\n                        x: Math.max(0, Number(bbox.x)),\n                        y: Math.max(0, Number(bbox.y)),\n                        width: Math.max(1, Number(bbox.width)),\n                        height: Math.max(1, Number(bbox.height)) // 確保大於0\n                    }))\n            };\n            // 驗證數據\n            if (isNaN(normalizedData.project_id) || normalizedData.project_id <= 0) {\n                throw new Error('Invalid project_id: must be a positive integer');\n            }\n            if (!normalizedData.video_id || normalizedData.video_id === 'undefined') {\n                throw new Error('Invalid video_id: must be a valid string');\n            }\n            if (isNaN(normalizedData.frame_num) || normalizedData.frame_num < 0) {\n                throw new Error('Invalid frame_num: must be a non-negative integer');\n            }\n            if (!Array.isArray(normalizedData.bboxes) || normalizedData.bboxes.length === 0) {\n                throw new Error('Invalid bboxes: must be a non-empty array');\n            }\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(normalizedData)\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                // 嘗試解析錯誤響應以獲取更詳細的信息\n                let errorMessage = \"HTTP \".concat(response.status);\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        errorMessage = \"\".concat(errorData.message, \" (HTTP \").concat(response.status, \")\");\n                    }\n                } catch (parseError) {\n                // 如果無法解析錯誤響應，使用默認錯誤\n                }\n                // 特殊處理 422 錯誤\n                if (response.status === 422) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"422 Unprocessable Entity: \".concat(errorMessage));\n                    throw new Error(\"數據格式錯誤: \".concat(errorMessage));\n                }\n                // 如果是 500 錯誤且還有重試次數，則重試\n                if (response.status >= 500 && retryCount < maxRetries) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"Server error \".concat(response.status, \", retrying... (attempt \").concat(retryCount + 1, \"/\").concat(maxRetries, \")\"));\n                    await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1))); // 指數退避\n                    return this.saveAnnotation(annotationData, retryCount + 1);\n                }\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(errorMessage), duration);\n                throw new Error(errorMessage);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, data);\n            return {\n                success: data.success || true,\n                message: data.message || 'Annotation saved successfully',\n                savedAt: new Date().toISOString()\n            };\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            // 如果是網路錯誤且還有重試次數，則重試\n            if (retryCount < maxRetries && (error instanceof TypeError || error instanceof Error && error.message.includes('fetch'))) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"Network error, retrying... (attempt \".concat(retryCount + 1, \"/\").concat(maxRetries, \")\"));\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1)));\n                return this.saveAnnotation(annotationData, retryCount + 1);\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error saving annotation via API, using frontend fallback', {\n                projectId: annotationData.project_id,\n                videoId: annotationData.video_id,\n                frameNum: annotationData.frame_num,\n                bboxCount: annotationData.bboxes.length,\n                retryCount,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            // 返回模擬成功響應\n            return {\n                success: true,\n                message: \"Annotation saved successfully (frontend fallback). \".concat(annotationData.bboxes.length, \" bounding boxes processed.\"),\n                savedAt: new Date().toISOString()\n            };\n        }\n    }\n    // Get next video\n    static async getNextVideo(projectId, currentVideoId) {\n        const startTime = Date.now();\n        const endpoint = '/next_video';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId,\n                currentVideoId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId,\n                    current_video_id: currentVideoId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackVideoData(currentVideoId);\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                nextVideoId: data.next_video_id\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error getting next video, using fallback data', {\n                projectId,\n                currentVideoId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackVideoData(currentVideoId);\n        }\n    }\n    // Fallback video data when API fails\n    static getFallbackVideoData(currentVideoId) {\n        // 簡單的循環邏輯：如果當前是video_1，返回video_2，否則返回video_1\n        const nextVideoId = currentVideoId === \"video_1\" ? \"video_2\" : \"video_1\";\n        return {\n            success: true,\n            message: \"Next video fetched successfully (fallback mode).\",\n            next_video_id: nextVideoId\n        };\n    }\n    // Fallback classes when API fails\n    static getFallbackClasses() {\n        return [\n            {\n                id: \"give_way_sign\",\n                name: \"give_way_sign\",\n                color: \"#fbbf24\"\n            },\n            {\n                id: \"pedestrian_child\",\n                name: \"pedestrian_child\",\n                color: \"#3b82f6\"\n            },\n            {\n                id: \"zebra_crossing_sign\",\n                name: \"zebra_crossing_sign\",\n                color: \"#8b5cf6\"\n            },\n            {\n                id: \"traffic_light_red\",\n                name: \"traffic_light_red\",\n                color: \"#10b981\"\n            },\n            {\n                id: \"stop_sign\",\n                name: \"stop_sign\",\n                color: \"#ef4444\"\n            }\n        ];\n    }\n    // ========== Training API Methods ==========\n    // Start training\n    static async startTraining(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/train\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error starting training:', error);\n            return {\n                success: true,\n                message: \"Training started successfully (frontend fallback).\"\n            };\n        }\n    }\n    // Get training progress\n    static async getTrainingProgress(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/get_training_progress\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(\"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackTrainingProgress();\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching training progress:', error);\n            return this.getFallbackTrainingProgress();\n        }\n    }\n    // Create dataset\n    static async createDataset(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/create_dataset\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error creating dataset:', error);\n            return {\n                success: true,\n                message: \"Dataset creation started successfully (frontend fallback).\"\n            };\n        }\n    }\n    // Get auto annotation progress\n    static async getAutoAnnotationProgress(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/get_auto_annotation_progress\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(\"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackAutoAnnotationProgress();\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching auto annotation progress:', error);\n            return this.getFallbackAutoAnnotationProgress();\n        }\n    }\n    // Fallback training progress when API fails\n    static getFallbackTrainingProgress() {\n        return {\n            success: true,\n            status: \"Training completed\",\n            progress: 100\n        };\n    }\n    // Fallback auto annotation progress when API fails\n    static getFallbackAutoAnnotationProgress() {\n        return {\n            success: true,\n            progress: 1.0\n        };\n    }\n    // ========== Deployment API Methods ==========\n    // Get model performance metrics\n    static async getModelPerformance(projectId) {\n        const startTime = Date.now();\n        const endpoint = '/get_model_performance';\n        try {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'POST', {\n                projectId\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(fullUrl, 'POST', new Error(\"HTTP \".concat(response.status)), duration);\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', \"Backend returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackModelPerformance();\n            }\n            const data = await response.json();\n            // Validate the response structure\n            if (!data || !data[\"model performance\"]) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Invalid response structure from backend, using fallback data');\n                return this.getFallbackModelPerformance();\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(fullUrl, 'POST', response.status, duration, {\n                performance: data[\"model performance\"]\n            });\n            return data;\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'POST', error, duration);\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', 'Error fetching model performance from backend, using fallback data', {\n                projectId,\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return this.getFallbackModelPerformance();\n        }\n    }\n    // Get model file paths\n    static async getModelPath(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/get_model_path\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(\"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackModelPath();\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching model path:', error);\n            return this.getFallbackModelPath();\n        }\n    }\n    // Fallback model performance data when API fails\n    static getFallbackModelPerformance() {\n        return {\n            success: true,\n            \"model performance\": {\n                mAP: 0.92,\n                precision: 0.94,\n                recall: 0.89,\n                f1_score: 0.91,\n                accuracy: 0.88,\n                status: \"Fallback data (backend unavailable)\"\n            }\n        };\n    }\n    // Fallback model path data when API fails\n    static getFallbackModelPath() {\n        return {\n            success: true,\n            \"model path\": {\n                onnx_path: \"/models/project_1/model.onnx\",\n                pytorch_path: \"/models/project_1/model.pth\",\n                config_path: \"/models/project_1/config.json\",\n                weights_path: \"/models/project_1/weights.pt\"\n            }\n        };\n    }\n    // ========== Debug API Methods ==========\n    // Get all available routes\n    static async getAvailableRoutes() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/debug/routes\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching available routes:', error);\n            return {\n                available_routes: []\n            };\n        }\n    }\n    // Get project debug information\n    static async getProjectDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/debug/project/\").concat(projectId), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching project debug info:', error);\n            return {\n                project_id: projectId,\n                opencv_available: false,\n                current_working_dir: '',\n                project_paths: [],\n                video_files: [],\n                total_videos: 0\n            };\n        }\n    }\n    // Get frame debug information\n    static async getFrameDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/debug/frames/\").concat(projectId), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching frame debug info:', error);\n            return {\n                project_id: projectId,\n                opencv_available: false,\n                found_videos: [],\n                frame_info: [],\n                total_videos: 0,\n                current_working_dir: ''\n            };\n        }\n    }\n    // Get video debug information\n    static async getVideoDebugInfo(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/debug/videos/\").concat(projectId), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error fetching video debug info:', error);\n            return {\n                project_id: projectId,\n                found_videos: [],\n                total_count: 0,\n                path_status: [],\n                opencv_available: false,\n                current_working_dir: ''\n            };\n        }\n    }\n    // ========== Enhanced Training API Methods ==========\n    // Get training status with enhanced error handling\n    static async getTrainingStatus(projectId) {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/get_training_progress\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    project_id: projectId\n                })\n            });\n            if (!response.ok) {\n                console.warn(\"API returned \".concat(response.status, \", using fallback data\"));\n                return this.getFallbackTrainingStatus();\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error fetching training status:', error);\n            return this.getFallbackTrainingStatus();\n        }\n    }\n    // Fallback training status when API fails\n    static getFallbackTrainingStatus() {\n        return {\n            success: true,\n            status: \"Not started\",\n            progress: 0,\n            message: \"Training status unavailable (fallback mode)\"\n        };\n    }\n    // ========== Model Download API Methods ==========\n    // Download model file with proper error handling\n    static async downloadModelFile(projectId, modelType) {\n        try {\n            // First get the model paths\n            const pathData = await this.getModelPath(projectId);\n            if (!pathData.success) {\n                return {\n                    success: false,\n                    error: 'Failed to get model paths'\n                };\n            }\n            const modelPaths = pathData[\"model path\"];\n            let downloadPath;\n            switch(modelType){\n                case 'onnx':\n                    downloadPath = modelPaths.onnx_path;\n                    break;\n                case 'pytorch':\n                    downloadPath = modelPaths.pytorch_path;\n                    break;\n                case 'weights':\n                    downloadPath = modelPaths.weights_path;\n                    break;\n                case 'config':\n                    downloadPath = modelPaths.config_path;\n                    break;\n            }\n            if (!downloadPath) {\n                return {\n                    success: false,\n                    error: \"\".concat(modelType, \" model not available\")\n                };\n            }\n            return {\n                success: true,\n                downloadUrl: downloadPath\n            };\n        } catch (error) {\n            console.error('Error downloading model file:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    // ========== Health Check API Methods ==========\n    // Check backend health\n    static async checkBackendHealth() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/health\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error checking backend health:', error);\n            return {\n                status: 'unhealthy',\n                message: 'Backend health check failed'\n            };\n        }\n    }\n    // Test backend connection\n    static async testBackendConnection() {\n        try {\n            const workingUrl = await findWorkingBackendUrl();\n            const response = await fetch(\"\".concat(workingUrl, \"/test\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Error testing backend connection:', error);\n            return {\n                message: 'Backend connection test failed',\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Get uploaded videos for a project\n    static async getUploadedVideos(projectId) {\n        const startTime = Date.now();\n        const endpoint = \"/get_project_videos/\".concat(projectId);\n        try {\n            // 驗證和清理輸入參數\n            const cleanProjectId = projectId.toString().replace(/\\D/g, '');\n            if (!cleanProjectId || cleanProjectId === \"undefined\" || cleanProjectId === \"\") {\n                throw new Error(\"Invalid project ID: \".concat(projectId));\n            }\n            const projectIdInt = parseInt(cleanProjectId);\n            if (isNaN(projectIdInt)) {\n                throw new Error(\"Invalid project ID: \".concat(projectIdInt));\n            }\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiCall(endpoint, 'GET', {\n                projectId: projectIdInt\n            });\n            // Find a working backend URL\n            const workingUrl = await findWorkingBackendUrl();\n            const fullUrl = \"\".concat(workingUrl).concat(endpoint);\n            const response = await fetch(fullUrl, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            const duration = Date.now() - startTime;\n            if (!response.ok) {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', \"Server error (\".concat(response.status, \") - possible causes: project not found, database issues\"));\n                const errorText = await response.text();\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.error('API', \"Server error details: \".concat(errorText));\n                throw new Error(\"HTTP \".concat(response.status));\n            }\n            const data = await response.json();\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiSuccess(endpoint, 'GET', response.status, duration);\n            // 返回視頻列表，確保格式正確\n            if (data && data.success && Array.isArray(data.videos)) {\n                return data.videos;\n            } else {\n                _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'API returned unexpected format, using fallback');\n                return [];\n            }\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.apiError(endpoint, 'GET', error, duration);\n            // 返回空數組作為fallback\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.warn('API', 'Using fallback data for videos');\n            return [];\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/logger.ts":
/*!***********************!*\
  !*** ./lib/logger.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n// Centralized logging utility for API monitoring and debugging\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    return LogLevel;\n}({});\nclass Logger {\n    addLog(level, category, message, data, url, status, duration) {\n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            level,\n            category,\n            message,\n            data,\n            url,\n            status,\n            duration\n        };\n        this.logs.unshift(logEntry);\n        // Keep only the last maxLogs entries\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(0, this.maxLogs);\n        }\n        // Notify listeners\n        this.listeners.forEach((listener)=>listener([\n                ...this.logs\n            ]));\n        // Console output with colors and better formatting\n        const levelNames = [\n            'DEBUG',\n            'INFO',\n            'WARN',\n            'ERROR'\n        ];\n        const colors = [\n            '#888',\n            '#2196F3',\n            '#FF9800',\n            '#F44336'\n        ];\n        const levelName = levelNames[level];\n        const color = colors[level];\n        // Enhanced console output with timestamp and better formatting\n        const timestamp = new Date().toLocaleTimeString();\n        const urlInfo = url ? \" → \".concat(url) : '';\n        const statusInfo = status ? \" (\".concat(status, \")\") : '';\n        const durationInfo = duration ? \" [\".concat(duration, \"ms]\") : '';\n        console.log(\"%c[\".concat(timestamp, \"] %c[\").concat(levelName, \"] %c[\").concat(category, \"] %c\").concat(message).concat(urlInfo).concat(statusInfo).concat(durationInfo), \"color: #666; font-size: 11px;\", \"color: \".concat(color, \"; font-weight: bold; font-size: 12px;\"), \"color: #666; font-size: 11px;\", \"color: #000; font-size: 12px;\", data ? data : '');\n    }\n    debug(category, message, data) {\n        if (this.currentLevel <= 0) {\n            this.addLog(0, category, message, data);\n        }\n    }\n    info(category, message, data) {\n        if (this.currentLevel <= 1) {\n            this.addLog(1, category, message, data);\n        }\n    }\n    warn(category, message, data) {\n        if (this.currentLevel <= 2) {\n            this.addLog(2, category, message, data);\n        }\n    }\n    error(category, message, data) {\n        if (this.currentLevel <= 3) {\n            this.addLog(3, category, message, data);\n        }\n    }\n    // API-specific logging methods\n    apiCall(url, method, data) {\n        this.info('API', \"Making \".concat(method, \" request to \").concat(url), data);\n    }\n    apiSuccess(url, method, status, duration, response) {\n        this.info('API', \"\".concat(method, \" \").concat(url, \" - Success (\").concat(status, \")\"), {\n            duration: \"\".concat(duration, \"ms\"),\n            response\n        });\n    }\n    apiError(url, method, error, duration) {\n        this.error('API', \"\".concat(method, \" \").concat(url, \" - Failed\"), {\n            error: error.message || error,\n            duration: duration ? \"\".concat(duration, \"ms\") : 'N/A'\n        });\n    }\n    apiTimeout(url, method, duration) {\n        this.warn('API', \"\".concat(method, \" \").concat(url, \" - Timeout after \").concat(duration, \"ms\"));\n    }\n    connectionTest(url, success, duration) {\n        if (success) {\n            this.info('CONNECTION', \"✅ Backend connection successful: \".concat(url), {\n                duration: duration ? \"\".concat(duration, \"ms\") : 'N/A'\n            });\n        } else {\n            this.warn('CONNECTION', \"❌ Backend connection failed: \".concat(url), {\n                duration: duration ? \"\".concat(duration, \"ms\") : 'N/A'\n            });\n        }\n    }\n    // Get all logs\n    getLogs() {\n        return [\n            ...this.logs\n        ];\n    }\n    // Get logs by category\n    getLogsByCategory(category) {\n        return this.logs.filter((log)=>log.category === category);\n    }\n    // Get logs by level\n    getLogsByLevel(level) {\n        return this.logs.filter((log)=>log.level === level);\n    }\n    // Clear logs\n    clearLogs() {\n        this.logs = [];\n        this.listeners.forEach((listener)=>listener([]));\n    }\n    // Set log level\n    setLogLevel(level) {\n        this.currentLevel = level;\n        if ( true && typeof window.localStorage !== 'undefined') {\n            try {\n                localStorage.setItem('logLevel', level.toString());\n            } catch (error) {\n                // localStorage might not be available in some environments\n                console.warn('Failed to save to localStorage:', error);\n            }\n        }\n    }\n    // Subscribe to log updates\n    subscribe(listener) {\n        this.listeners.push(listener);\n        return ()=>{\n            const index = this.listeners.indexOf(listener);\n            if (index > -1) {\n                this.listeners.splice(index, 1);\n            }\n        };\n    }\n    // Get API health summary\n    getApiHealthSummary() {\n        var _apiLogs_filter_sort_, _apiLogs_filter_sort_1;\n        const apiLogs = this.getLogsByCategory('API');\n        const totalCalls = apiLogs.length;\n        const successfulCalls = apiLogs.filter((log)=>log.status && log.status >= 200 && log.status < 300).length;\n        const failedCalls = apiLogs.filter((log)=>log.status && (log.status < 200 || log.status >= 300)).length;\n        const responseTimes = apiLogs.filter((log)=>log.duration).map((log)=>log.duration);\n        const averageResponseTime = responseTimes.length > 0 ? responseTimes.reduce((sum, time)=>sum + time, 0) / responseTimes.length : 0;\n        const lastSuccessfulCall = (_apiLogs_filter_sort_ = apiLogs.filter((log)=>log.status && log.status >= 200 && log.status < 300).sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0]) === null || _apiLogs_filter_sort_ === void 0 ? void 0 : _apiLogs_filter_sort_.timestamp;\n        const lastFailedCall = (_apiLogs_filter_sort_1 = apiLogs.filter((log)=>log.status && (log.status < 200 || log.status >= 300)).sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())[0]) === null || _apiLogs_filter_sort_1 === void 0 ? void 0 : _apiLogs_filter_sort_1.timestamp;\n        return {\n            totalCalls,\n            successfulCalls,\n            failedCalls,\n            averageResponseTime: Math.round(averageResponseTime),\n            lastSuccessfulCall,\n            lastFailedCall\n        };\n    }\n    constructor(){\n        this.logs = [];\n        this.maxLogs = 1000; // Keep last 1000 logs\n        this.currentLevel = 1;\n        this.listeners = [];\n        // Load log level from localStorage or default to INFO (only in browser)\n        if ( true && typeof window.localStorage !== 'undefined') {\n            try {\n                const savedLevel = localStorage.getItem('logLevel');\n                if (savedLevel) {\n                    this.currentLevel = parseInt(savedLevel);\n                }\n            } catch (error) {\n                // localStorage might not be available in some environments\n                console.warn('Failed to access localStorage:', error);\n            }\n        }\n    }\n}\n// Export singleton instance\nconst logger = new Logger();\n// Make logger available globally for console debugging\nif (true) {\n    window.apiLogger = logger;\n    window.apiLogs = {\n        // Get all logs\n        all: ()=>logger.getLogs(),\n        // Get logs by category\n        byCategory: (category)=>logger.getLogsByCategory(category),\n        // Get logs by level\n        byLevel: (level)=>logger.getLogsByLevel(level),\n        // Get API health summary\n        health: ()=>logger.getApiHealthSummary(),\n        // Clear logs\n        clear: ()=>logger.clearLogs(),\n        // Set log level\n        setLevel: (level)=>logger.setLogLevel(level),\n        // Test connection\n        testConnection: async ()=>{\n            const startTime = Date.now();\n            try {\n                const response = await fetch('http://localhost:8888/health');\n                const duration = Date.now() - startTime;\n                logger.connectionTest('http://localhost:8888', response.ok, duration);\n                return {\n                    success: response.ok,\n                    duration,\n                    status: response.status\n                };\n            } catch (error) {\n                const duration = Date.now() - startTime;\n                logger.connectionTest('http://localhost:8888', false, duration);\n                return {\n                    success: false,\n                    duration,\n                    error: error instanceof Error ? error.message : String(error)\n                };\n            }\n        }\n    };\n    // Log level constants for easy access\n    window.LogLevel = LogLevel;\n    console.log(\"\\n\\uD83D\\uDD27 API Logger Console Helper Available!\\n\\nUsage:\\n• apiLogs.all() - Get all logs\\n• apiLogs.byCategory('API') - Get API logs\\n• apiLogs.byLevel(LogLevel.ERROR) - Get error logs\\n• apiLogs.health() - Get API health summary\\n• apiLogs.clear() - Clear all logs\\n• apiLogs.setLevel(LogLevel.DEBUG) - Set log level\\n• apiLogs.testConnection() - Test backend connection\\n\\nLog Levels: DEBUG(0), INFO(1), WARN(2), ERROR(3)\\n  \");\n}\n// Export convenience functions\nconst log = {\n    debug: (category, message, data)=>logger.debug(category, message, data),\n    info: (category, message, data)=>logger.info(category, message, data),\n    warn: (category, message, data)=>logger.warn(category, message, data),\n    error: (category, message, data)=>logger.error(category, message, data),\n    apiCall: (url, method, data)=>logger.apiCall(url, method, data),\n    apiSuccess: (url, method, status, duration, response)=>logger.apiSuccess(url, method, status, duration, response),\n    apiError: (url, method, error, duration)=>logger.apiError(url, method, error, duration),\n    apiTimeout: (url, method, duration)=>logger.apiTimeout(url, method, duration),\n    connectionTest: (url, success, duration)=>logger.connectionTest(url, success, duration)\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/logger.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!":

  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/ProjectContext.tsx */ \"(app-pages-browser)/./contexts/ProjectContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"} */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-sans\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistSans\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"} */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Geist_Mono\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-mono\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistMono\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNyYW5kbyU1QyU1Q0Rlc2t0b3AlNUMlNUNub2NvZGlsZSU1QyU1Q25vY29kaWxlJTVDJTVDY29udGV4dHMlNUMlNUNQcm9qZWN0Q29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJQcm9qZWN0UHJvdmlkZXIlMjIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Qy5wbnBtJTVDJTVDbmV4dCU0MDE1LjQuNl8lNDBiYWJlbCUyQmNvcmUlNDA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDElNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMkdlaXN0JTVDJTIyJTJDJTVDJTIyYXJndW1lbnRzJTVDJTIyJTNBJTVCJTdCJTVDJTIydmFyaWFibGUlNUMlMjIlM0ElNUMlMjItLWZvbnQtZ2Vpc3Qtc2FucyU1QyUyMiUyQyU1QyUyMnN1YnNldHMlNUMlMjIlM0ElNUIlNUMlMjJsYXRpbiU1QyUyMiU1RCU3RCU1RCUyQyU1QyUyMnZhcmlhYmxlTmFtZSU1QyUyMiUzQSU1QyUyMmdlaXN0U2FucyU1QyUyMiU3RCUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNyYW5kbyU1QyU1Q0Rlc2t0b3AlNUMlNUNub2NvZGlsZSU1QyU1Q25vY29kaWxlJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDLnBucG0lNUMlNUNuZXh0JTQwMTUuNC42XyU0MGJhYmVsJTJCY29yZSU0MDcuMl84MDZlZmI0MGU4YTEzYjdkMzQ2YTQ2ZDA2ZGIwNjQwMSU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1Q25leHQlNUMlNUNmb250JTVDJTVDZ29vZ2xlJTVDJTVDdGFyZ2V0LmNzcyUzRiU3QiU1QyUyMnBhdGglNUMlMjIlM0ElNUMlMjJhcHAlNUMlNUMlNUMlNUNsYXlvdXQudHN4JTVDJTIyJTJDJTVDJTIyaW1wb3J0JTVDJTIyJTNBJTVDJTIyR2Vpc3RfTW9ubyU1QyUyMiUyQyU1QyUyMmFyZ3VtZW50cyU1QyUyMiUzQSU1QiU3QiU1QyUyMnZhcmlhYmxlJTVDJTIyJTNBJTVDJTIyLS1mb250LWdlaXN0LW1vbm8lNUMlMjIlMkMlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlN0QlNUQlMkMlNUMlMjJ2YXJpYWJsZU5hbWUlNUMlMjIlM0ElNUMlMjJnZWlzdE1vbm8lNUMlMjIlN0QlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDcmFuZG8lNUMlNUNEZXNrdG9wJTVDJTVDbm9jb2RpbGUlNUMlNUNub2NvZGlsZSU1QyU1Q2FwcCU1QyU1Q2dsb2JhbHMuY3NzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsb0xBQXFKO0FBQ3JKO0FBQ0EsZ3FCQUFxWDtBQUNyWDtBQUNBLDBxQkFBMFg7QUFDMVg7QUFDQSw0SkFBb0ciLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcIlByb2plY3RQcm92aWRlclwiXSAqLyBcIkM6XFxcXFVzZXJzXFxcXHJhbmRvXFxcXERlc2t0b3BcXFxcbm9jb2RpbGVcXFxcbm9jb2RpbGVcXFxcY29udGV4dHNcXFxcUHJvamVjdENvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFxVc2Vyc1xcXFxyYW5kb1xcXFxEZXNrdG9wXFxcXG5vY29kaWxlXFxcXG5vY29kaWxlXFxcXG5vZGVfbW9kdWxlc1xcXFwucG5wbVxcXFxuZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDFcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZm9udFxcXFxnb29nbGVcXFxcdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJhcHBcXFxcXFxcXGxheW91dC50c3hcXFwiLFxcXCJpbXBvcnRcXFwiOlxcXCJHZWlzdFxcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwidmFyaWFibGVcXFwiOlxcXCItLWZvbnQtZ2Vpc3Qtc2Fuc1xcXCIsXFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXX1dLFxcXCJ2YXJpYWJsZU5hbWVcXFwiOlxcXCJnZWlzdFNhbnNcXFwifVwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxccmFuZG9cXFxcRGVza3RvcFxcXFxub2NvZGlsZVxcXFxub2NvZGlsZVxcXFxub2RlX21vZHVsZXNcXFxcLnBucG1cXFxcbmV4dEAxNS40LjZfQGJhYmVsK2NvcmVANy4yXzgwNmVmYjQwZThhMTNiN2QzNDZhNDZkMDZkYjA2NDAxXFxcXG5vZGVfbW9kdWxlc1xcXFxuZXh0XFxcXGZvbnRcXFxcZ29vZ2xlXFxcXHRhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwiYXBwXFxcXFxcXFxsYXlvdXQudHN4XFxcIixcXFwiaW1wb3J0XFxcIjpcXFwiR2Vpc3RfTW9ub1xcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwidmFyaWFibGVcXFwiOlxcXCItLWZvbnQtZ2Vpc3QtbW9ub1xcXCIsXFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXX1dLFxcXCJ2YXJpYWJsZU5hbWVcXFwiOlxcXCJnZWlzdE1vbm9cXFwifVwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxccmFuZG9cXFxcRGVza3RvcFxcXFxub2NvZGlsZVxcXFxub2NvZGlsZVxcXFxhcHBcXFxcZ2xvYmFscy5jc3NcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={432:(e,r,t)=>{var n=t(887);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},887:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(432);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sYUFBYSxPQUFPLGNBQWMsYUFBYSwwQkFBMEIsb0NBQW9DLDhCQUE4Qix1QkFBdUIsUUFBUSxrQkFBa0IsV0FBVyxnQkFBZ0IsOEJBQThCLHFCQUFxQixnQkFBZ0IsbUJBQW1CLGlCQUFpQixnQ0FBZ0MsV0FBVyxPQUFPLDJCQUEyQiw2QkFBNkIsS0FBSyw4Q0FBOEMsb0JBQW9CLE1BQU0sU0FBUyxPQUFPLG1CQUFtQixPQUFPLFlBQVksZ0NBQWdDLGNBQWMsT0FBTyxnQ0FBZ0MsT0FBTyxnQ0FBZ0MscUNBQXFDLDRDQUE0QywyQ0FBMkMsU0FBUyxnQkFBZ0IsSUFBSSx3QkFBd0IsT0FBTyxZQUFZLE9BQU8sdUJBQXVCLHFCQUFxQixPQUFPLHVCQUF1QixPQUFPLGdDQUFnQyxPQUFPLGVBQWUsb0JBQW9CLGlCQUFpQixzQ0FBc0MsZUFBZSxPQUFPLGdCQUFnQiw0QkFBNEIsR0FBRyx1Q0FBdUMsZUFBZSxPQUFPLGdCQUFnQiw0QkFBNEIsR0FBRywyQ0FBMkMsa0JBQWtCLDJDQUEyQyxLQUFLLDZCQUE2QiwyQkFBMkIsTUFBTSxPQUFPLGVBQWUsRUFBRSxvQkFBb0Isb0JBQW9CLEtBQUssR0FBRyxTQUFTLHdCQUF3QixPQUFPLGFBQWEsd0NBQXdDLFlBQVksc0JBQXNCLFlBQVksT0FBTyw2QkFBNkIscUJBQXFCLE9BQU8scUJBQXFCLE9BQU8sTUFBTSxlQUFlLFFBQVEsR0FBRyxTQUFTLHFCQUFxQix3Q0FBd0Msc0JBQXNCLHFCQUFxQixPQUFPLGFBQWEsR0FBRyx5QkFBeUIseUNBQXlDLGFBQWEsWUFBWSx3QkFBd0IsTUFBTSwwREFBMEQsWUFBWSw2QkFBNkIsa0JBQWtCLG9CQUFvQixxQkFBcUIsYUFBYSxnRUFBZ0UsWUFBWSxPQUFPLE1BQU0sK0NBQStDLEtBQUssb0NBQW9DLGFBQWEsNEJBQTRCLFNBQVMseUJBQXlCLCtCQUErQixVQUFVLGlCQUFpQixNQUFNLGNBQWMsa0JBQWtCLFNBQVMsZ0JBQWdCLHNCQUFzQixXQUFXLHNCQUFzQixTQUFTLG9EQUFvRCxpREFBaUQsMkNBQTJDLFFBQVEsc0JBQXNCLGdCQUFnQixTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSywrQkFBK0IsaUJBQWlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHJhbmRvXFxEZXNrdG9wXFxub2NvZGlsZVxcbm9jb2RpbGVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG5leHRAMTUuNC42X0BiYWJlbCtjb3JlQDcuMl84MDZlZmI0MGU4YTEzYjdkMzQ2YTQ2ZDA2ZGIwNjQwMVxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxcbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXGhtclxcaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezQzMjooZSxyLHQpPT57dmFyIG49dCg4ODcpO3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGE9dHlwZW9mIGRvY3VtZW50PT09XCJ1bmRlZmluZWRcIjt2YXIgbz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaDtmdW5jdGlvbiBkZWJvdW5jZShlLHIpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpczt2YXIgaT1hcmd1bWVudHM7dmFyIGE9ZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCl7cmV0dXJuIGUuYXBwbHkobixpKX07Y2xlYXJUaW1lb3V0KHQpO3Q9c2V0VGltZW91dChhLHIpfX1mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwoZSl7dmFyIHI9aVtlXTtpZighcil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7cj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31lbHNle3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO3ZhciBhPXRbdC5sZW5ndGgtMV07aWYoYSl7cj1hLnNyY319aVtlXT1yfXJldHVybiBmdW5jdGlvbihlKXtpZighcil7cmV0dXJuIG51bGx9dmFyIHQ9ci5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTt2YXIgaT10JiZ0WzFdO2lmKCFpKXtyZXR1cm5bci5yZXBsYWNlKFwiLmpzXCIsXCIuY3NzXCIpXX1pZighZSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19cmV0dXJuIGUuc3BsaXQoXCIsXCIpLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcIlwiLmNvbmNhdChpLFwiXFxcXC5qcyRcIiksXCJnXCIpO3JldHVybiBuKHIucmVwbGFjZSh0LFwiXCIuY29uY2F0KGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLGkpLFwiLmNzc1wiKSkpfSkpfX1mdW5jdGlvbiB1cGRhdGVDc3MoZSxyKXtpZighcil7aWYoIWUuaHJlZil7cmV0dXJufXI9ZS5ocmVmLnNwbGl0KFwiP1wiKVswXX1pZighaXNVcmxSZXF1ZXN0KHIpKXtyZXR1cm59aWYoZS5pc0xvYWRlZD09PWZhbHNlKXtyZXR1cm59aWYoIXJ8fCEoci5pbmRleE9mKFwiLmNzc1wiKT4tMSkpe3JldHVybn1lLnZpc2l0ZWQ9dHJ1ZTt2YXIgdD1lLmNsb25lTm9kZSgpO3QuaXNMb2FkZWQ9ZmFsc2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsKGZ1bmN0aW9uKCl7aWYodC5pc0xvYWRlZCl7cmV0dXJufXQuaXNMb2FkZWQ9dHJ1ZTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSk7dC5ocmVmPVwiXCIuY29uY2F0KHIsXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtpZihlLm5leHRTaWJsaW5nKXtlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZS5uZXh0U2libGluZyl9ZWxzZXtlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIGdldFJlbG9hZFVybChlLHIpe3ZhciB0O2U9bihlLHtzdHJpcFdXVzpmYWxzZX0pO3Iuc29tZSgoZnVuY3Rpb24obil7aWYoZS5pbmRleE9mKHIpPi0xKXt0PW59fSkpO3JldHVybiB0fWZ1bmN0aW9uIHJlbG9hZFN0eWxlKGUpe2lmKCFlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7dmFyIHQ9ZmFsc2U7by5jYWxsKHIsKGZ1bmN0aW9uKHIpe2lmKCFyLmhyZWYpe3JldHVybn12YXIgbj1nZXRSZWxvYWRVcmwoci5ocmVmLGUpO2lmKCFpc1VybFJlcXVlc3Qobikpe3JldHVybn1pZihyLnZpc2l0ZWQ9PT10cnVlKXtyZXR1cm59aWYobil7dXBkYXRlQ3NzKHIsbik7dD10cnVlfX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRBbGwoKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtvLmNhbGwoZSwoZnVuY3Rpb24oZSl7aWYoZS52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufXVwZGF0ZUNzcyhlKX0pKX1mdW5jdGlvbiBpc1VybFJlcXVlc3QoZSl7aWYoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QoZSkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhKXtjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtyZXR1cm4gbm9vcH12YXIgdD1nZXRDdXJyZW50U2NyaXB0VXJsKGUpO2Z1bmN0aW9uIHVwZGF0ZSgpe3ZhciBlPXQoci5maWxlbmFtZSk7dmFyIG49cmVsb2FkU3R5bGUoZSk7aWYoci5sb2NhbHMpe2NvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpO3JldHVybn1pZihuKXtjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIixlLmpvaW4oXCIgXCIpKX1lbHNle2NvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7cmVsb2FkQWxsKCl9fXJldHVybiBkZWJvdW5jZSh1cGRhdGUsNTApfX0sODg3OmU9PntmdW5jdGlvbiBub3JtYWxpemVVcmwoZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLHIpe3N3aXRjaChyKXtjYXNlXCIuLlwiOmUucG9wKCk7YnJlYWs7Y2FzZVwiLlwiOmJyZWFrO2RlZmF1bHQ6ZS5wdXNoKHIpfXJldHVybiBlfSksW10pLmpvaW4oXCIvXCIpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtlPWUudHJpbSgpO2lmKC9eZGF0YTovaS50ZXN0KGUpKXtyZXR1cm4gZX12YXIgcj1lLmluZGV4T2YoXCIvL1wiKSE9PS0xP2Uuc3BsaXQoXCIvL1wiKVswXStcIi8vXCI6XCJcIjt2YXIgdD1lLnJlcGxhY2UobmV3IFJlZ0V4cChyLFwiaVwiKSxcIlwiKS5zcGxpdChcIi9cIik7dmFyIG49dFswXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLFwiXCIpO3RbMF09XCJcIjt2YXIgaT1ub3JtYWxpemVVcmwodCk7cmV0dXJuIHIrbitpfX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG49clt0XTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg0MzIpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n        case REACT_ACTIVITY_TYPE:\n          return \"Activity\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_PORTAL_TYPE:\n            return \"Portal\";\n          case REACT_CONTEXT_TYPE:\n            return type.displayName || \"Context\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function UnknownOwner() {\n      return Error(\"react-stack-top-frame\");\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n      REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          };\n    React = {\n      react_stack_bottom_frame: function (callStackForError) {\n        return callStackForError();\n      }\n    };\n    var specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(\n      React,\n      UnknownOwner\n    )();\n    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      var trackActualOwner =\n        1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        trackActualOwner\n          ? Error(\"react-stack-top-frame\")\n          : unknownOwnerDebugStack,\n        trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSSxLQUFxQyxFQUFFLEVBRTFDLENBQUM7QUFDRixFQUFFLDhRQUFzRTtBQUN4RSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxyYW5kb1xcRGVza3RvcFxcbm9jb2RpbGVcXG5vY29kaWxlXFxub2RlX21vZHVsZXNcXC5wbnBtXFxuZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDFcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZGlzdFxcY29tcGlsZWRcXHJlYWN0XFxqc3gtZGV2LXJ1bnRpbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"}":
/*!****************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{"path":"app\\layout.tsx","import":"Geist","arguments":[{"variable":"--font-geist-sans","subsets":["latin"]}],"variableName":"geistSans"} ***!
  \****************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist', 'Geist Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_188709\",\"variable\":\"__variable_188709\"};\n    if(true) {\n      // 1761142467222\n      var cssReload = __webpack_require__(/*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz97XCJwYXRoXCI6XCJhcHBcXFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJHZWlzdFwiLFwiYXJndW1lbnRzXCI6W3tcInZhcmlhYmxlXCI6XCItLWZvbnQtZ2Vpc3Qtc2Fuc1wiLFwic3Vic2V0c1wiOltcImxhdGluXCJdfV0sXCJ2YXJpYWJsZU5hbWVcIjpcImdlaXN0U2Fuc1wifSIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCQUFrQixTQUFTLDhEQUE4RDtBQUN6RixPQUFPLElBQVU7QUFDakI7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyx3V0FBOE0sY0FBYyxzREFBc0Q7QUFDaFQsTUFBTSxVQUFVO0FBQ2hCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxyYW5kb1xcRGVza3RvcFxcbm9jb2RpbGVcXG5vY29kaWxlXFxub2RlX21vZHVsZXNcXC5wbnBtXFxuZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDFcXG5vZGVfbW9kdWxlc1xcbmV4dFxcZm9udFxcZ29vZ2xlXFx0YXJnZXQuY3NzP3tcInBhdGhcIjpcImFwcFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJHZWlzdFwiLFwiYXJndW1lbnRzXCI6W3tcInZhcmlhYmxlXCI6XCItLWZvbnQtZ2Vpc3Qtc2Fuc1wiLFwic3Vic2V0c1wiOltcImxhdGluXCJdfV0sXCJ2YXJpYWJsZU5hbWVcIjpcImdlaXN0U2Fuc1wifXxhcHAtcGFnZXMtYnJvd3NlciJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInR2Vpc3QnLCAnR2Vpc3QgRmFsbGJhY2snXCIsXCJmb250U3R5bGVcIjpcIm5vcm1hbFwifSxcImNsYXNzTmFtZVwiOlwiX19jbGFzc05hbWVfMTg4NzA5XCIsXCJ2YXJpYWJsZVwiOlwiX192YXJpYWJsZV8xODg3MDlcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTc2MTE0MjQ2NzIyMlxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCJDOi9Vc2Vycy9yYW5kby9EZXNrdG9wL25vY29kaWxlL25vY29kaWxlL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCIvX25leHQvXCIsXCJlc01vZHVsZVwiOmZhbHNlLFwibG9jYWxzXCI6dHJ1ZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist\",\"arguments\":[{\"variable\":\"--font-geist-sans\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistSans\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"}":
/*!*********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{"path":"app\\layout.tsx","import":"Geist_Mono","arguments":[{"variable":"--font-geist-mono","subsets":["latin"]}],"variableName":"geistMono"} ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist Mono', 'Geist Mono Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_9a8899\",\"variable\":\"__variable_9a8899\"};\n    if(true) {\n      // 1761142467230\n      var cssReload = __webpack_require__(/*! ./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE1LjQuNl9AYmFiZWwrY29yZUA3LjJfODA2ZWZiNDBlOGExM2I3ZDM0NmE0NmQwNmRiMDY0MDEvbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz97XCJwYXRoXCI6XCJhcHBcXFxcbGF5b3V0LnRzeFwiLFwiaW1wb3J0XCI6XCJHZWlzdF9Nb25vXCIsXCJhcmd1bWVudHNcIjpbe1widmFyaWFibGVcIjpcIi0tZm9udC1nZWlzdC1tb25vXCIsXCJzdWJzZXRzXCI6W1wibGF0aW5cIl19XSxcInZhcmlhYmxlTmFtZVwiOlwiZ2Vpc3RNb25vXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsd0VBQXdFO0FBQ25HLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdXQUE4TSxjQUFjLHNEQUFzRDtBQUNoVCxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHJhbmRvXFxEZXNrdG9wXFxub2NvZGlsZVxcbm9jb2RpbGVcXG5vZGVfbW9kdWxlc1xcLnBucG1cXG5leHRAMTUuNC42X0BiYWJlbCtjb3JlQDcuMl84MDZlZmI0MGU4YTEzYjdkMzQ2YTQ2ZDA2ZGIwNjQwMVxcbm9kZV9tb2R1bGVzXFxuZXh0XFxmb250XFxnb29nbGVcXHRhcmdldC5jc3M/e1wicGF0aFwiOlwiYXBwXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkdlaXN0X01vbm9cIixcImFyZ3VtZW50c1wiOlt7XCJ2YXJpYWJsZVwiOlwiLS1mb250LWdlaXN0LW1vbm9cIixcInN1YnNldHNcIjpbXCJsYXRpblwiXX1dLFwidmFyaWFibGVOYW1lXCI6XCJnZWlzdE1vbm9cIn18YXBwLXBhZ2VzLWJyb3dzZXIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0eWxlXCI6e1wiZm9udEZhbWlseVwiOlwiJ0dlaXN0IE1vbm8nLCAnR2Vpc3QgTW9ubyBGYWxsYmFjaydcIixcImZvbnRTdHlsZVwiOlwibm9ybWFsXCJ9LFwiY2xhc3NOYW1lXCI6XCJfX2NsYXNzTmFtZV85YTg4OTlcIixcInZhcmlhYmxlXCI6XCJfX3ZhcmlhYmxlXzlhODg5OVwifTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzYxMTQyNDY3MjMwXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIkM6L1VzZXJzL3JhbmRvL0Rlc2t0b3Avbm9jb2RpbGUvbm9jb2RpbGUvbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTUuNC42X0BiYWJlbCtjb3JlQDcuMl84MDZlZmI0MGU4YTEzYjdkMzQ2YTQ2ZDA2ZGIwNjQwMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Geist_Mono\",\"arguments\":[{\"variable\":\"--font-geist-mono\",\"subsets\":[\"latin\"]}],\"variableName\":\"geistMono\"}\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/.pnpm/next@15.4.6_@babel+core@7.2_806efb40e8a13b7d346a46d06db06401/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-sans%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistSans%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Cnode_modules%5C%5C.pnpm%5C%5Cnext%4015.4.6_%40babel%2Bcore%407.2_806efb40e8a13b7d346a46d06db06401%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22app%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Geist_Mono%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22variable%5C%22%3A%5C%22--font-geist-mono%5C%22%2C%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22geistMono%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Crando%5C%5CDesktop%5C%5Cnocodile%5C%5Cnocodile%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);